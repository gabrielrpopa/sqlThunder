/*
 * Copyright 2024-present Infinite Loop Corporation Limited, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.widescope.storage.dataExchangeRepo;



import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException; 
import java.sql.Statement;
import java.util.List;
import com.widescope.logging.AppLogger;
import org.springframework.stereotype.Component;
import com.widescope.sqlThunder.utils.StaticUtils;
import com.widescope.sqlThunder.utils.StringUtils;
import com.widescope.sqlThunder.utils.security.SHA512Hasher;

@Component
public class ExchangeDb {

	private final static String className = Thread.currentThread().getStackTrace()[1].getClassName();

	// JDBC driver name and database URL 
	private final String JDBC_DRIVER = "org.h2.Driver";   
	private final String DB_URL_DISK = "jdbc:h2:file:./exchangeRepo;MODE=PostgreSQL";  
	
	//  Database credentials 
	private final String USER = "sa"; 
	private final String PASS = "sa"; 
	
	public ExchangeDb()	{}
	
		   
	
	private 
	void 
	closeHandles(	Connection conn, 
					Statement statement,
					ResultSet rs){
		try	{ if(rs !=null && !rs.isClosed()) { rs.close();	} }	catch(Exception ignored)	{}
		try	{ if(statement !=null && !statement.isClosed()) { statement.close();	} }	catch(Exception ignored)	{}
		try	{ if(conn !=null && !conn.isClosed()) { conn.close();	} }	catch(Exception ignored)	{}
	}
	
	

	private 
	void
	createSchema(final List<String> ddlList) throws Exception	{
		Connection conn = null;
		Statement statement = null; 
		try { 
			Class.forName(JDBC_DRIVER);
			conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			statement = conn.createStatement();
			for (String ddl : ddlList) {
				statement.executeUpdate(ddl);
	        }
			
			statement.close();
			conn.commit();
			conn.close();

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		} finally	{
			closeHandles(conn, statement, null);
	    } 
	}

	
		

	
	
	public 
	static 
	void generateSchema(final String owner) throws Exception {
		List<String> ddlList = new java.util.ArrayList<String>();
		try {
			ddlList.add(ExchangeDb.exchangeTable);
			ddlList.add(ExchangeDb.exchangeTable_index1);
			ddlList.add(ExchangeDb.exchangeTable_index2);
			ddlList.add(ExchangeDb.exchangeTable_index3);

			ddlList.add(ExchangeDb.userTable);
			ddlList.add(ExchangeDb.userTable_index1);
			ddlList.add(ExchangeDb.userTable_const1);

			ddlList.add(ExchangeDb.userToExchangeTable);
			ddlList.add(ExchangeDb.userToExchangeTable_index2);
			ddlList.add(ExchangeDb.userToExchangeTable_fk1);
			ddlList.add(ExchangeDb.userToExchangeTable_fk2);
			ddlList.add(ExchangeDb.userToExchangeTable_const1);

			ddlList.add(ExchangeDb.fileTable);
			ddlList.add(ExchangeDb.fileTable_const1);

			ExchangeDb exchangeDb = new ExchangeDb();
			exchangeDb.createSchema(ddlList);

			ExchangeRecord e = exchangeDb.getOwnExchange(owner);
			if(e == null) {
				ExchangeRecord newE =
						new ExchangeRecord(1,
								"http://" + StaticUtils.getIp(),
								owner,
								StringUtils.generateUniqueString());
				exchangeDb.mergeExchange(newE);
			}

			ddlList.clear();
			ddlList.add(ExchangeDb.insertExchange2);

			ddlList.add(ExchangeDb.insertUser);
			ddlList.add(ExchangeDb.insertUserToExchange);

			exchangeDb.createSchema(ddlList);
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}


	}
	

	
	/*
	 * Table contains local/own exchange named the same as company or department owning this software instance
	 * Also contains all other partner exchanges. Files are always sent from own exchange to partner exchanges
	 * and vice versa.
	 * */
	public static String 
	exchangeTable = "CREATE TABLE IF NOT EXISTS "
			+ "exchangeTable (id BIGINT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
							+ "	exchangeAddress VARCHAR(MAX), "
							+ "	exchangeName VARCHAR(MAX), "
							+ "	exchangeUid VARCHAR(MAX) "
							+ ")";
	
	public static String 
	exchangeTable_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_exchangeTable_1 ON exchangeTable(exchangeAddress);";
	
	
	public static String 
	exchangeTable_index2 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_exchangeTable_2 ON exchangeTable(exchangeName);";

	
	public static String 
	exchangeTable_index3 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_exchangeTable_3 ON exchangeTable(exchangeUid);";

	public static String 
	insertExchange2 = "INSERT INTO exchangeTable VALUES(2, 'https://209.15.130.226/sqlThunder', 'Partner exchange', '123456789DEF');";
	
	public static String 
	userTable = "CREATE TABLE IF NOT EXISTS "
			+ " userTable (id BIGINT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
						+ "	internalUserId BIGINT, "  /*if external will be -1, if internal will have same userId from userTable*/
						+ "	email VARCHAR(MAX), "
						+ "	exchangeId BIGINT, "
						+ "	isAdmin VARCHAR(1) DEFAULT 'N', "
						+ "	userPassword VARCHAR(MAX) "
						+ ")";
	
	
	public static String 
	userTable_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_userTable_1 ON userTable(email);";
	public static String 
	userTable_const1 = "ALTER TABLE userTable ADD CONSTRAINT IF NOT EXISTS ck_userTable_1  CHECK (isAdmin IN ('Y', 'N') );";

	
	public static String 
	insertUser = "INSERT INTO userTable VALUES(1, 1, 'super@gmail.com', 1, 'Y', '') ;";
	

	
	
	
	public static String 
	userToExchangeTable = "CREATE TABLE IF NOT EXISTS "
			+ " userToExchangeTable (id BIGINT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
									+ "	userId BIGINT, "  /*if external will be -1, if internal will have same userId from userTable*/
									+ "	exchangeId BIGINT, "
									+ "	isAdmin VARCHAR(1) DEFAULT  'N' "
									+ ")";
	
	

	public static String userToExchangeTable_index2 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_userToExchangeTable_2 ON userToExchangeTable(userId, exchangeId);";
	
	public static String 
	userToExchangeTable_const1 = "ALTER TABLE userToExchangeTable ADD CONSTRAINT IF NOT EXISTS ck_userToExchangeTable_1  CHECK (isAdmin IN ('Y', 'N') );";

	
	public static String 
	userToExchangeTable_fk1 = "ALTER TABLE userToExchangeTable ADD CONSTRAINT IF NOT EXISTS userToExchangeTableFk_1 FOREIGN KEY ( exchangeId ) REFERENCES exchangeTable( id );";

	
	public static String 
	userToExchangeTable_fk2 = "ALTER TABLE userToExchangeTable ADD CONSTRAINT IF NOT EXISTS userToExchangeTableFk_2 FOREIGN KEY ( userId ) REFERENCES userTable( id );";

	
	public static String 
	insertUserToExchange = "INSERT INTO userToExchangeTable VALUES(1, 1, 2, 'Y') ;";
		
	
	
	/*Because this is a peer to peer communication (even we have an independent exchange)
	 * The communication happens always between own exchange and other exchanges
	 * */
	
	public static String 
	fileTable = "CREATE TABLE IF NOT EXISTS fileTable (id BIGINT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
													+ "	exchangeId BIGINT, "   /*tell me where it's stored*/
													+ "	fromUserId BIGINT, "
													+ "	toUserId BIGINT, "
													+ "	fileName VARCHAR(999), "
													+ "	fileType VARCHAR(999), "
													+ "	fileUid VARCHAR(999), "
													+ "	fileKey VARCHAR(999), "
													+ "	timeStamp BIGINT, "
													+ "	timeAvailable BIGINT "
													+ ")";
	public static String 
	fileTable_const1 = "ALTER TABLE fileTable ADD CONSTRAINT IF NOT EXISTS ck_fileTable_1 "
							+ "CHECK (fileType IN ('H2', 'JSON', 'CSV', 'EXCEL', 'WORD', 'UNKNOWN') );";
	

		
	
	
	
	
	
	public 
	ExchangeRecord 
	getOwnExchange(final String exchangeName) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id,"
								+ "	exchangeAddress,"
								+ " exchangeName,"
								+ " exchangeUid "
								+ " FROM exchangeTable WHERE exchangeName = ?";
		
		ExchangeRecord ret = null;
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, exchangeName);
			ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	ret = new ExchangeRecord(	rs.getLong("id"),
            								rs.getString("exchangeAddress"),
            								rs.getString("exchangeName"),
									    	rs.getString("exchangeUid")
			            			     );
            	
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public 
	ExchangeRecord 
	getExchangeId(final ExchangeRecord exchangeRecord) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id,"
								+ "	exchangeAddress,"
								+ " exchangeName,"
								+ " exchangeUid "
								+ " FROM exchangeTable "
								+ " WHERE exchangeAddress = ? "
								+ " AND exchangeName = ? "
								+ " AND exchangeUid = ? ";
		
		ExchangeRecord ret = null;
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, exchangeRecord.getExchangeAddress());
			preparedStatement.setString(2, exchangeRecord.getExchangeName());
			preparedStatement.setString(3, exchangeRecord.getExchangeUid());
			ResultSet rs = preparedStatement.executeQuery();
			if(rs.next()) {
				ret = new ExchangeRecord(	rs.getInt("id"),
						rs.getString("exchangeAddress"),
						rs.getString("exchangeName"),
						rs.getString("exchangeUid")
				);
			}
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	
	public 
	ExchangeList 
	searchExchange(final String exchange) throws Exception {
		Class.forName(JDBC_DRIVER);
		ExchangeList ret = new ExchangeList();
		String sqlString = "SELECT id,"
								+ "	exchangeAddress,"
								+ " exchangeName,"
								+ " exchangeUid "
								+ " FROM exchangeTable "
								+ " WHERE exchangeUid LIKE ?  OR exchangeName LIKE ? OR exchangeAddress LIKE ?"	;
		
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, exchange);
			preparedStatement.setString(2, exchange);
			preparedStatement.setString(3, exchange);
			
			ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	ExchangeRecord er = new ExchangeRecord(rs.getInt("id"), rs.getString("exchangeAddress"), rs.getString("exchangeName"), rs.getString("exchangeUid"));
            	ret.addExchangeRecord(er);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public 
	ExchangeRecord 
	getExchange(final String exchangeUid) throws Exception {
		Class.forName(JDBC_DRIVER);
		ExchangeRecord er = null;
		String sqlString = "SELECT id, exchangeAddress, exchangeName, exchangeUid FROM exchangeTable WHERE exchangeUid = ? "	;

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, exchangeUid);
			ResultSet rs = preparedStatement.executeQuery();
			if(rs.next()) {
				er = new ExchangeRecord(rs.getInt("id"), rs.getString("exchangeAddress"), rs.getString("exchangeName"), rs.getString("exchangeUid"));
			}

            rs.close();
            return er;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public 
	ExchangeRecord 
	getExchangeById(final long exchangeId) throws Exception {
		Class.forName(JDBC_DRIVER);
		
		ExchangeRecord er = null;
		String sqlString = "SELECT id, exchangeAddress, exchangeName, exchangeUid FROM exchangeTable WHERE id = ? "	;

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, exchangeId);
			ResultSet rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
            	er = new ExchangeRecord(rs.getInt("id"), rs.getString("exchangeAddress"), rs.getString("exchangeName"), rs.getString("exchangeUid"));
            }
            rs.close();
            return er;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	public 
	ExchangeList
	getAllExchanges() throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, exchangeAddress, exchangeName, exchangeUid FROM exchangeTable ";
		
		ExchangeList ret = new ExchangeList();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			Statement preparedStatement = conn.createStatement())	{
			ResultSet rs = preparedStatement.executeQuery(sqlString);
            while ( rs.next() ) {
            	ExchangeRecord e= 
            			new ExchangeRecord(	rs.getInt("id"), rs.getString("exchangeAddress"), rs.getString("exchangeName"), rs.getString("exchangeUid"));
            	ret.addExchangeRecord(e);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	
	
	
	public 
	void 
	mergeExchange(final ExchangeRecord exchangeRecord)	throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = " MERGE INTO exchangeTable (exchangeAddress, exchangeName, exchangeUid) "
						+ " KEY (exchangeAddress, exchangeName) VALUES(?, ?, ?)";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			
			preparedStatement.setString(1, exchangeRecord.getExchangeAddress());
			preparedStatement.setString(2, exchangeRecord.getExchangeName());
			preparedStatement.setString(3, exchangeRecord.getExchangeUid());
			preparedStatement.execute();

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	public 
	void 
	updateExchange(final ExchangeRecord exchangeRecord)	throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = " UPDATE exchangeTable SET exchangeAddress = ?, exchangeName = ?, exchangeUid = ? WHERE id = ?";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			
			preparedStatement.setString(1, exchangeRecord.getExchangeAddress());
			preparedStatement.setString(2, exchangeRecord.getExchangeName());
			preparedStatement.setString(3, exchangeRecord.getExchangeUid());
			preparedStatement.setLong(4, exchangeRecord.getId());
			
			preparedStatement.execute();

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	public 
	void 
	changeOwnExchange(final String newExchangeName)	throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = " UPDATE exchangeTable SET exchangeName = ? WHERE id = 1";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, newExchangeName);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	public 
	void 
	deleteExchange(final String uid) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = "DELETE FROM exchangeTable WHERE uid = ?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
			preparedStatement.setString(1, uid);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}

	
	/*Users*/
	
	
	public UserDbRecord
	getUserByEmail(final String email) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, internalUserId, email, exchangeId, isAdmin, userPassword FROM userTable WHERE email = ?";
		UserDbRecord ret = null;
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			
			preparedStatement.setString(1, email );
			
			
			ResultSet rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
            	ret = new UserDbRecord(	rs.getInt("id"),
								       	rs.getLong("internalUserId"),
								       	rs.getString("email"),
								       	rs.getInt("exchangeId"),
								       	rs.getString("isAdmin"),
								       	"***");
            	

            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	
	public UserDbRecord
	getUserById(final long id) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id,internalUserId, email, exchangeId, isAdmin, userPassword FROM userTable WHERE id = ?";
		UserDbRecord ret = null;
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, id );
			ResultSet rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
            	ret = new UserDbRecord(	rs.getInt("id"),
								       	rs.getLong("internalUserId"),
								       	rs.getString("email"),
								       	rs.getInt("exchangeId"),
								       	rs.getString("isAdmin"),
								       	"***");
            	

            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	public UserDbList
	getUsers(final String email) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		UserDbList ret = new UserDbList();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, internalUserId, email, exchangeId, isAdmin, userPassword FROM userTable WHERE email like ? ";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, "%" + email + "%");
			ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	UserDbRecord u = new UserDbRecord(	rs.getInt("id"),
											       	rs.getLong("internalUserId"),
											       	rs.getString("email"),
											       	rs.getInt("exchangeId"),
											       	rs.getString("isAdmin"),
											       	"***");
            	
            	ret.addUser(u);;
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	public UserDbList
	getUsersByExchange(final long exchangeId) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		UserDbList ret = new UserDbList();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, internalUserId, email, exchangeId, isAdmin, userPassword FROM userTable WHERE exchangeId = ? ";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, exchangeId);
			ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	UserDbRecord u = new UserDbRecord(	rs.getInt("id"),
											       	rs.getLong("internalUserId"),
											       	rs.getString("email"),
											       	rs.getInt("exchangeId"),
											       	rs.getString("isAdmin"),
											       	"***");
            	
            	ret.addUser(u);;
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	
	public UserDbList
	getUsersByAssociatedExchange(final long exchangeId) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		UserDbList ret = new UserDbList();
		Class.forName(JDBC_DRIVER);
		String sqlString =  " SELECT u.id, u.internalUserId, u.email, e.exchangeId, u.isAdmin, u.userPassword " +
							" FROM userTable u JOIN userToExchangeTable e ON u.id = e.userId " +
							" WHERE e.exchangeId = ? ";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, exchangeId);
			ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	UserDbRecord u = new UserDbRecord(	rs.getInt("id"),
											       	rs.getLong("internalUserId"),
											       	rs.getString("email"),
											       	rs.getInt("exchangeId"),
											       	rs.getString("isAdmin"),
											       	"***");
            	
            	ret.addUser(u);;
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	public ExchangeList
	getAssociatedExchangesToUser(final long userId) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		ExchangeList ret = new ExchangeList();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT u.id, u.exchangeAddress, u.exchangeName, u.exchangeUid "
						+ " FROM exchangeTable u JOIN userToExchangeTable e ON u.id = e.exchangeId "
						+ " WHERE e.userId = ? ";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, userId);
			ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	ExchangeRecord  u = new ExchangeRecord (rs.getInt("id"),
											       		rs.getString("exchangeAddress"),
											       		rs.getString("exchangeName"),
											       		rs.getString("exchangeUid"));
            	
            	ret.addExchangeRecord(u);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	public UserDbRecord
	getUserByInternalUserId(final long internalUserId) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		UserDbRecord ret = null;
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, internalUserId, email, exchangeId, isAdmin, userPassword FROM userTable WHERE internalUserId = ? ";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, internalUserId);
			ResultSet rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
            	ret = new UserDbRecord(	rs.getInt("id"),
											       	rs.getLong("internalUserId"),
											       	rs.getString("email"),
											       	rs.getInt("exchangeId"),
											       	rs.getString("isAdmin"),
											       	"***");
            	

            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	public boolean 
	isUser(final String email, final String password) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, internalUserId, email exchangeId, isAdmin, userPassword FROM userTable WHERE email = ?";
		UserDbRecord ret = new UserDbRecord();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, email );
			ResultSet rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
            	ret = new UserDbRecord(	rs.getInt("id"),
										rs.getLong("internalUserId"),
										rs.getString("email"),
										rs.getInt("exchangeId"),
										rs.getString("isAdmin"),
										rs.getString("userPassword"));
            	

            }
            rs.close();
            String hashedPassword = SHA512Hasher.hash(password);
            return hashedPassword.equals(ret.getUserPassword());
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
		
		
	}
	
	
	public 
	void 
	mergeUser(final UserDbRecord userToExchangeDbRecord)	throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = " MERGE INTO userTable (internalUserId, exchangeId, email, userPassword, isAdmin) KEY (email) VALUES(?, ?, ?, ?, ?)";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

			preparedStatement.setLong(1, userToExchangeDbRecord.getInternalUserId());
			preparedStatement.setLong(2, userToExchangeDbRecord.getExchangeId());
			preparedStatement.setString(3, userToExchangeDbRecord.getEmail());
			preparedStatement.setString(4, userToExchangeDbRecord.getUserPassword());
			preparedStatement.setString(5, userToExchangeDbRecord.getIsAdmin());
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	public 
	void 
	addUser(final UserDbRecord userToExchangeDbRecord)	throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = " INSERT INTO userTable (internalUserId, exchangeId, email, userPassword, isAdmin) VALUES(?, ?, ?, ?, ?)";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

			preparedStatement.setLong(1, userToExchangeDbRecord.getInternalUserId());
			preparedStatement.setLong(2, userToExchangeDbRecord.getExchangeId());
			preparedStatement.setString(3, userToExchangeDbRecord.getEmail());
			preparedStatement.setString(4, userToExchangeDbRecord.getUserPassword());
			preparedStatement.setString(5, userToExchangeDbRecord.getIsAdmin());
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	public 
	void 
	deleteUser(final long userId) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = "DELETE FROM userTable WHERE id=?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {

			preparedStatement.setLong(1, userId);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	public 
	void 
	updateUserPassword(final long userId, final String password) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = "UPDATE userTable SET userPassword = ? WHERE id=?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {

			String hashedPassword = SHA512Hasher.hash(password);
			preparedStatement.setString(1, hashedPassword);
			preparedStatement.setLong(2, userId);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	public 
	void 
	updateUserPassword(final String email, final String password) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = "UPDATE userTable SET userPassword = ? WHERE email = ?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
			
			String hashedPassword = SHA512Hasher.hash(password);
			preparedStatement.setString(1, hashedPassword);
			preparedStatement.setString(2, email);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	public 
	void 
	deleteUserToExchanges(final long userId) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = "DELETE FROM userToExchangeTable WHERE userId=?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {

			preparedStatement.setLong(1, userId);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	/************** User To Exchange ***************/
	
	
	public 
	ExchangeList
	getAssociatedExchanges(final long userId) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT e.id, e.exchangeAddress, e.exchangeName, e.exchangeUid "
						+ " FROM exchangeTable e JOIN userToExchangeTable u "
						+ "	ON u.exchangeId = e.id"
						+ " WHERE u.userId = ?";
		
		ExchangeList ret = new ExchangeList();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, userId);
			ResultSet rs = preparedStatement.executeQuery();
			
            while ( rs.next() ) {
            	ExchangeRecord e=  new ExchangeRecord(	rs.getInt("id"),
														rs.getString("exchangeAddress"),
														rs.getString("exchangeName"),
														rs.getString("exchangeUid"));
            	ret.addExchangeRecord(e);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	public boolean
	isUserToExchange(final long userId, final long exchangeId) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id FROM userToExchangeTable WHERE userId = ? AND exchangeId = ?";
		
		boolean isTrue = false;
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, userId );
			preparedStatement.setLong(2, exchangeId );
			ResultSet rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
            	isTrue = true;
            }
            rs.close();
            return isTrue;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	
	
	public 
	void 
	mergeUserToExchange(final long userId, final int exchangeId, final String isAdmin)	throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = "INSERT INTO userToExchangeTable (userId, exchangeId, isAdmin) VALUES(?, ?, ?)";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

			preparedStatement.setLong(1, userId);
			preparedStatement.setInt(2, exchangeId);
			preparedStatement.setString(3, isAdmin);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	public 
	UserToExchangeDbRecord 
	mergeUserToExchange_(final long userId, final int exchangeId, final String isAdmin)	throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		UserToExchangeDbRecord ret = null;
		Class.forName(JDBC_DRIVER); 
		String sqlString2 = "INSERT INTO userToExchangeTable (userId, exchangeId isAdmin) VALUES(?, ?, ?)";
		String sqlString1 = "SELECT id, userId, exchangeId, isAdmin FROM userToExchangeTable WHERE userId = ? AND exchangeId = ?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS))	{
			boolean isThere = false; 
			PreparedStatement preparedStatement1 = conn.prepareStatement(sqlString1);
			preparedStatement1.setLong(1, userId );
			preparedStatement1.setLong(2, exchangeId );
			ResultSet rs = preparedStatement1.executeQuery();
            if ( rs.next() ) {
            	isThere = true;
            }
            rs.close();
            preparedStatement1.close();
            if(!isThere) {
				PreparedStatement preparedStatement2 = conn.prepareStatement(sqlString2);
				preparedStatement2.setLong(1, userId);
				preparedStatement2.setInt(2, exchangeId);
				preparedStatement2.setString(3, isAdmin);
				preparedStatement2.execute();
				preparedStatement2.close();
            }
            PreparedStatement preparedStatement3 = conn.prepareStatement(sqlString1);
            preparedStatement3.setLong(1, userId );
            preparedStatement3.setLong(2, exchangeId );
			ResultSet rs2 = preparedStatement3.executeQuery();
            if ( rs2.next() ) {
            	ret = new UserToExchangeDbRecord(	rs.getInt("id"),
													rs.getLong("userId"),
													rs.getInt("exchangeId"),
													rs.getString("isAdmin"));
            	
            }
            rs2.close();
            preparedStatement3.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	public 
	void 
	deleteUserToExchange(final long userId, final int exchangeId) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = "DELETE FROM userToExchangeTable WHERE userId=? AND exchangeId = ?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
			preparedStatement.setLong(1, userId);
			preparedStatement.setInt(2, exchangeId);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	public UserToExchangeDbRecord
	getUserToExchange(final long userId, final int exchangeId) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		UserToExchangeDbRecord ret = null;
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, userId, exchangeId, isAdmin FROM userToExchangeTable WHERE userId = ? AND exchangeId = ?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			
			preparedStatement.setLong(1, userId );
			preparedStatement.setLong(2, exchangeId );
			ResultSet rs = preparedStatement.executeQuery();
			
            if ( rs.next() ) {
            	ret = new UserToExchangeDbRecord(	rs.getInt("id"),
													rs.getLong("userId"),
													rs.getInt("exchangeId"),
													rs.getString("isAdmin"));
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	public UserToExchangeDbList
	getUserToExchange() throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		UserToExchangeDbList ret = new UserToExchangeDbList();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, userId, exchangeId, isAdmin FROM userToExchangeTable ";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			Statement preparedStatement = conn.createStatement())	{
			ResultSet rs = preparedStatement.executeQuery(sqlString);
            while ( rs.next() ) {
            	UserToExchangeDbRecord u 
            	= new UserToExchangeDbRecord(	rs.getInt("id"),
									       		rs.getLong("userId"),
									       		rs.getInt("exchangeId"),
									       		rs.getString("isAdmin") );
            	ret.addUserToExchangeDbRecord(u);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	public UserToExchangeDbRecordExtendedList
	getUserToExchangeExtended() throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		UserToExchangeDbRecordExtendedList ret = new UserToExchangeDbRecordExtendedList();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT ue.id, ue.userId, u.internalUserId, u.email as userEmail, ue.exchangeId, e.exchangeUid, e.exchangeName "
						+ " FROM userToExchangeTable ue "
						+ " JOIN exchangeTable e ON e.id = ue.exchangeId "
						+ " JOIN userTable u ON u.id = ue.userId ";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			Statement preparedStatement = conn.createStatement())	{
			ResultSet rs = preparedStatement.executeQuery(sqlString);
			
            while ( rs.next() ) {
            	UserToExchangeDbRecordExtended u 
            	= new UserToExchangeDbRecordExtended(	rs.getInt("id"),
											       		rs.getLong("userId"),
											       		rs.getLong("internalUserId"),
											       		rs.getString("userEmail"),
											       		rs.getInt("exchangeId"),
											       		rs.getString("exchangeUid"),
											       		rs.getString("exchangeName") );
            	ret.addUserToExchangeDbExtendedRecord(u);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	/*****************Exchange Files ******************/
	
	public 
	ExchangeFileDbRecord 
	getFile(final long id) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, requestId, exchangeId, fromUserId, toUserId, fileName, fileType, comment, fullFilePath, group, source FROM fileTable WHERE id = ? ";
		ExchangeFileDbRecord ret = new ExchangeFileDbRecord();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

            preparedStatement.setLong(1, id);
            ResultSet rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
            	ret = new ExchangeFileDbRecord(	rs.getInt("id"),
												rs.getString("requestId"),
            								   	rs.getInt("exchangeId"),
									           	rs.getLong("fromUserId"),
									           	rs.getLong("toUserId"),
												rs.getString("fileName"),
												rs.getString("fileType"),
												rs.getString("comment"),
												rs.getString("fullFilePath"),
												rs.getString("group"),
												rs.getString("source"));
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	public 
	ExchangeFileDbRecord 
	getFile(final String fileUid, final String fileKey) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, requestId, exchangeId, fromUserId, toUserId, fileName, fileType, comment, fullFilePath, group, source FROM fileTable WHERE fileUid =  ? AND fileKey = ?";
		ExchangeFileDbRecord ret = new ExchangeFileDbRecord();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

            preparedStatement.setString(1, fileUid);
            preparedStatement.setString(2, fileKey);
            ResultSet rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
            	ret = new ExchangeFileDbRecord(	rs.getInt("id"),
												rs.getString("requestId"),
												rs.getInt("exchangeId"),
												rs.getLong("fromUserId"),
												rs.getLong("toUserId"),
												rs.getString("fileName"),
												rs.getString("fileType"),
												rs.getString("comment"),
												rs.getString("fullFilePath"),
												rs.getString("group"),
												rs.getString("source"));

            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	public 
	ExchangeFileDbList 
	getFiles(	final long fromUserId, 
				final long toUserId) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, requestId, exchangeId, fromUserId, toUserId, fileName, fileType, comment, fullFilePath, group, source FROM fileTable WHERE fromUserId = ? AND toUserId = ? ";
		ExchangeFileDbList ret = new ExchangeFileDbList();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            
			preparedStatement.setLong(1, fromUserId);
            preparedStatement.setLong(2, toUserId);
            ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	ExchangeFileDbRecord r = new ExchangeFileDbRecord(	rs.getInt("id"),
																	rs.getString("requestId"),
																	rs.getInt("exchangeId"),
																	rs.getLong("fromUserId"),
																	rs.getLong("toUserId"),
																	rs.getString("fileName"),
																	rs.getString("fileType"),
																	rs.getString("comment"),
																	rs.getString("fullFilePath"),
																	rs.getString("group"),
																	rs.getString("source") );
            	ret.addExchangeCompanyDbRecord(r);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	public 
	ExchangeFileDbList 
	getFilesFromUser(final String fromUserId) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, requestId, exchangeId, fromUserId, toUserId, fileName, fileType, comment, fullFilePath, group, source FROM fileTable WHERE fromUserId = ? ";
		
		ExchangeFileDbList ret = new ExchangeFileDbList();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, fromUserId);
            ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	ExchangeFileDbRecord r = new ExchangeFileDbRecord(	rs.getInt("id"),
																	rs.getString("requestId"),
																	rs.getInt("exchangeId"),
																	rs.getLong("fromUserId"),
																	rs.getLong("toUserId"),
																	rs.getString("fileName"),
																	rs.getString("fileType"),
																	rs.getString("comment"),
																	rs.getString("fullFilePath"),
																	rs.getString("group"),
																	rs.getString("source") );
            	ret.addExchangeCompanyDbRecord(r);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	public 
	ExchangeFileDbList 
	getFilesForUser(final long userId) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, requestId, exchangeId, fromUserId, toUserId, fileName, fileType, comment, fullFilePath, group, source FROM fileTable WHERE toUserId = ? ";
		
		ExchangeFileDbList ret = new ExchangeFileDbList();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            
			preparedStatement.setLong(1, userId);

            
            ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	ExchangeFileDbRecord r = new ExchangeFileDbRecord(	rs.getInt("id"),
																	rs.getString("requestId"),
																	rs.getInt("exchangeId"),
																	rs.getLong("fromUserId"),
																	rs.getLong("toUserId"),
																	rs.getString("fileName"),
																	rs.getString("fileType"),
																	rs.getString("comment"),
																	rs.getString("fullFilePath"),
																	rs.getString("group"),
																	rs.getString("source")
														           
										 			           );
            	ret.addExchangeCompanyDbRecord(r);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	
	
	
	public 
	void 
	addFile(final ExchangeFileDbRecord exchangeFileDbRecord)	throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = "INSERT INTO fileTable (requestId, exchangeId, fromUserId, toUserId, fileName, fileType, comment, fullFilePath, group, source) " +
							"VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

			preparedStatement.setString(1, exchangeFileDbRecord.getRequestId());
			preparedStatement.setLong(2, exchangeFileDbRecord.getExchangeId());
			preparedStatement.setLong(3, exchangeFileDbRecord.getFromUserId());
			preparedStatement.setLong(4, exchangeFileDbRecord.getToUserId());
			preparedStatement.setString(5, exchangeFileDbRecord.getFileName());
			preparedStatement.setString(6, exchangeFileDbRecord.getFileType());
			preparedStatement.setString(7, exchangeFileDbRecord.getComment());
			preparedStatement.setString(8, exchangeFileDbRecord.getFullFilePath());
			preparedStatement.setString(9, exchangeFileDbRecord.getGroup());
			preparedStatement.setString(10, exchangeFileDbRecord.getSource());
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}

	
	public 
	void 
	deleteFile(final long id) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = "DELETE FROM fileTable WHERE id = ?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
			preparedStatement.setLong(1, id);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	public 
	void 
	deleteFile(	final String fileUid, 
				final String fileKey) throws Exception {
		String methodName = Thread.currentThread().getStackTrace()[1].getMethodName();
		Class.forName(JDBC_DRIVER); 
		String sqlString = "DELETE FROM fileTable WHERE fileUid = ? AND fileKey = ?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
			preparedStatement.setString(1, fileUid);
			preparedStatement.setString(2, fileKey);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, className, methodName));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, className, methodName, AppLogger.db));
		}
	}
	
	
	
	
	
}



