package com.widescope.sqlThunder.config.configRepo;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import java.util.stream.Collectors;


import com.widescope.logging.AppLogger;
import com.widescope.sqlThunder.utils.Ip4NetUtils;
import com.widescope.sqlThunder.utils.user.AuthUtil;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerMapping;

import com.widescope.cluster.management.clusterManagement.ClusterDb.MachineNode;
import com.widescope.sqlThunder.utils.FileUtilWrapper;




@Component
public class ConfigRepoDb {

	public static Map<String, String> localIpList = new ConcurrentHashMap<>();
	public static Map<String, MachineNode> clusterNodes = new ConcurrentHashMap<String, MachineNode>(); 
	public static Map<String, String> clusterIp = new ConcurrentHashMap<String, String>();
	
	
	public static Map<String, List<String>> endpointsWithIp = new ConcurrentHashMap<>();
	public static Map<String, ConfigRepoDbRecord> configValues = new ConcurrentHashMap<>();
	

	// JDBC driver name and database URL 
	private final String JDBC_DRIVER = "org.h2.Driver";   
	private final String DB_URL_DISK = "jdbc:h2:file:./configRepo;MODE=PostgreSQL";  
	
	//  Database credentials 
	private final String USER = "sa"; 
	private final String PASS = "sa"; 
	
	public ConfigRepoDb()	{}
	
		   
	
	private 
	void 
	closeHandles(	Connection conn, 
					Statement statement, 
					ResultSet rs){
		try	{ if(rs !=null && !rs.isClosed()) { rs.close();	} }	catch(Exception ignored)	{}
		try	{ if(statement !=null && !statement.isClosed()) { statement.close();	} }	catch(Exception ignored)	{}
		try	{ if(conn !=null && !conn.isClosed()) { conn.close();	} }	catch(Exception ignored)	{}
	}
	
	

	private 
	boolean 
	createSchema(final List<String> ddlList) throws Exception	{

		boolean isOK = false;
		Connection conn = null; 
		Statement statement = null; 
		try { 
			Class.forName(JDBC_DRIVER);
			conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			statement = conn.createStatement();
			for (String ddl : ddlList) {
				isOK = statement.execute(ddl);
	        }
			conn.commit();
			return isOK;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		} finally {
			closeHandles(conn, statement, null);
		}
	}

	
		

	
	
	public 
	static 
	void generateSchema(final List<String> allEndPoints) throws Exception {
		try {
			List<String> ddlList = new ArrayList<>();

			ddlList.add(ConfigRepoDb.configTable);
			ddlList.add(ConfigRepoDb.configTable_index1);
			ddlList.add(ConfigRepoDb.configTable_const1);

			ddlList.add(ConfigRepoDb.endpointTable);
			ddlList.add(ConfigRepoDb.endpointTable_index1);

			ddlList.add(ConfigRepoDb.ipTable);
			ddlList.add(ConfigRepoDb.ipTable_index1);
			ddlList.add(ConfigRepoDb.ipTable_fk1);





			ConfigRepoDb f = new ConfigRepoDb();
			f.createSchema(ddlList);
			ConfigRepoDbRecordList defaultSettings = f.buildDefaultSettings();
			f.addAllDefaultConfigIfMissing(defaultSettings);

			f.addAllEndpoints(allEndPoints);
			EndpointDbRecordList ep =f.getEndpoints();
			IpToEndpointDbRecordList ipl =f.getAllIp();

			List<IpToEndpointDbRecord> ipAddressList = new ArrayList<>();
			for(EndPointDbRecord r: ep.getEndpointDbRecordLst()) {
				List<String> ipList = ipl.getIpToEndpointDbRecordLst().stream().filter(x->x.getIdEndpoint() == r.getId()).map(IpToEndpointDbRecord::getIpAddress).collect(Collectors.toList());
				if(ipList.isEmpty()) {
					IpToEndpointDbRecord x = new IpToEndpointDbRecord(-1, r.getId(), "*");
					ipAddressList.add(x);
				}
			}

			if(!ipAddressList.isEmpty()) {
				f.addIpAddressToEndpoint(ipAddressList);
			}
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	

	
	////////////////////////////////////// Storage table - //////////////////////////////////////////////////////


	public static String
	configTable = "CREATE TABLE IF NOT EXISTS "
			+ "configTable (id INT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
			+ "	configName VARCHAR(MAX), "
			+ "	configValue VARCHAR(MAX), "
			+ "	configDescription VARCHAR(MAX), "
			+ "	configType VARCHAR(MAX) "
			+ ")";

	public static String configTable_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_configTable_1 ON configTable(configName);";

	public static String
	configTable_const1 = "ALTER TABLE configTable ADD CONSTRAINT IF NOT EXISTS ck_configTable_1  CHECK (configType IN ('JSON', 'STRING', 'INTEGER', 'BOOLEAN', 'DOUBLE', 'FLOAT', 'LONG') );";



	public static String
	endpointTable = "CREATE TABLE IF NOT EXISTS "
			+ "endpointTable (id INT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
							+ "	endpoint VARCHAR(MAX) "
							+ ")";

	public static String
	endpointTable_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_endpointTable_1 ON endpointTable(endpoint);";


	public static String
	ipTable = "CREATE TABLE IF NOT EXISTS "
			+ "ipTable (id INT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
					+ "	idEndpoint BIGINT, "
					+ "	ipAddress VARCHAR(MAX) "
					+ ")";

	public static String
	ipTable_index1 = "CREATE INDEX IF NOT EXISTS idx_ipTable_2 ON ipTable(idEndpoint, ipAddress);";

	public static String
	ipTable_fk1 = "ALTER TABLE ipTable ADD CONSTRAINT IF NOT EXISTS ipTableFk_1 FOREIGN KEY ( idEndpoint ) REFERENCES endpointTable( id );";






	public
	ConfigRepoDbRecordList
	getConfig() throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, "
								+ "configName, "
								+ "configValue, "
								+ "configDescription, "
								+ "configType "
								+ "FROM configTable  ";

		ConfigRepoDbRecordList ret = new ConfigRepoDbRecordList();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				Statement preparedStatement = conn.createStatement())	{

			ResultSet rs = preparedStatement.executeQuery(sqlString);
            while ( rs.next() ) {
            	ConfigRepoDbRecord i = new ConfigRepoDbRecord(	rs.getInt("id"),
											            		rs.getString("configName"),
											            		rs.getString("configValue"),
											            		rs.getString("configDescription"),
											            		rs.getString("configType")
					            			                   );
            	ret.addConfigRepoDbRecordLst(i);
            }
            rs.close();
            return ret;

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public
	ConfigRepoDbRecordList
	getConfig(final String configName) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, "
								+ "configName, "
								+ "configValue, "
								+ "configDescription, "
								+ "configType "
								+ "FROM configTable WHERE configName = ? ";

		ConfigRepoDbRecordList ret = new ConfigRepoDbRecordList();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

			preparedStatement.setString(1, configName);

			ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	ConfigRepoDbRecord i = new ConfigRepoDbRecord(	rs.getInt("id"),
											            		rs.getString("configName"),
											            		rs.getString("configValue"),
											            		rs.getString("configDescription"),
											            		rs.getString("configType")
					            			                   );
            	ret.addConfigRepoDbRecordLst(i);
            }
            rs.close();
            return ret;

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public
	ConfigRepoDbRecord
	getConfigRec(final String configName) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, "
								+ "configName, "
								+ "configValue, "
								+ "configDescription, "
								+ "configType "
								+ "FROM configTable WHERE configName = ? ";

		ConfigRepoDbRecord ret = null;
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

			preparedStatement.setString(1, configName);

			ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	ret = new ConfigRepoDbRecord(	rs.getInt("id"),
											    rs.getString("configName"),
											    rs.getString("configValue"),
											    rs.getString("configDescription"),
											    rs.getString("configType")
					            			);

            }
            rs.close();
            return ret;

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public
	void
	addConfig(final ConfigRepoDbRecord configRepoDbRecord) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "INSERT INTO configTable (configName, configValue, configDescription, configType) VALUES(?, ?, ?, ?)";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, configRepoDbRecord.getConfigName());
			preparedStatement.setString(2, configRepoDbRecord.getConfigValue());
			preparedStatement.setString(3, configRepoDbRecord.getConfigDescription());
			preparedStatement.setString(4, configRepoDbRecord.getConfigType());

			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}


	public
	void
	addAllDefaultConfigIfMissing(final ConfigRepoDbRecordList cfg) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "INSERT INTO configTable (configName, configValue, configDescription, configType) VALUES(?, ?, ?, ?)";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

			for(ConfigRepoDbRecord c:  cfg.getConfigRepoDbRecordLst()) {
				try {
					preparedStatement.setString(1, c.getConfigName());
					preparedStatement.setString(2, c.getConfigValue());
					preparedStatement.setString(3, c.getConfigDescription());
					preparedStatement.setString(4, c.getConfigType());
					preparedStatement.execute();
				} catch (SQLException e)	{
					throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
				} catch (Exception e) {
					throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
				}
			}
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}


	public
	void
	deleteConfig(final int id) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "DELETE FROM configTable WHERE id=?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
			preparedStatement.setInt(1, id);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}



	public
	void
	updateConfig(final ConfigRepoDbRecord configRepoDbRecord) throws Exception {
		Class.forName(JDBC_DRIVER);

		String sqlString = "UPDATE configTable SET configName = ?, "
											+ "configValue = ?, "
											+ "configDescription = ?, "
											+ "configType = ? "
											+ "WHERE id = ?";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, configRepoDbRecord.getConfigName());
			preparedStatement.setString(2, configRepoDbRecord.getConfigValue());
			preparedStatement.setString(3, configRepoDbRecord.getConfigDescription());
			preparedStatement.setString(4, configRepoDbRecord.getConfigType());
			preparedStatement.setInt(5, configRepoDbRecord.getId());
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}


	/*End point*/

	public
	EndpointDbRecordList
	getEndpoints() throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, endpoint FROM endpointTable  ";

		EndpointDbRecordList ret = new EndpointDbRecordList();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				Statement preparedStatement = conn.createStatement())	{

			ResultSet rs = preparedStatement.executeQuery(sqlString);
            while ( rs.next() ) {
            	EndPointDbRecord i = new EndPointDbRecord(rs.getInt("id"),
											              rs.getString("endpoint"),
											              null
				            			                  );


            	ret.addEndpointDbRecordLst(i);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public
	List<Integer>
	getEndpointIds() throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id FROM endpointTable  ";

		List<Integer>  ret = new ArrayList<Integer> ();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				Statement preparedStatement = conn.createStatement())	{

			ResultSet rs = preparedStatement.executeQuery(sqlString);
            while ( rs.next() ) {
            	ret.add(rs.getInt("id"));
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}


	public
	EndPointDbRecord
	getEndpoint(final int id) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, endpoint FROM endpointTable WHERE id = ? ";

		EndPointDbRecord ret = new EndPointDbRecord();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setInt(1, id);
			ResultSet rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
            	ret = new EndPointDbRecord(rs.getInt("id"), rs.getString("endpoint"), null);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}


	public
	void
	addAllEndpoints(final List<String> endPointDbRecordList) throws Exception {
		int count = 0;
		Class.forName(JDBC_DRIVER);
		String sqlString = "MERGE INTO endpointTable (endpoint) KEY (endpoint) VALUES (?)";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

			for(String r: endPointDbRecordList) {
				try {
					preparedStatement.setString(1, r);
					preparedStatement.execute();
					count++;
				} catch (Exception e) {
					AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db);
				}
			}
			AppLogger.logInfo(Thread.currentThread().getStackTrace()[1], AppLogger.db, "added " + count + " end-points to the database");
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}


	public
	void
	addIpAddressToEndpoint(final List<IpToEndpointDbRecord> ipAddressList) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "MERGE INTO ipTable (idEndpoint,ipAddress) KEY (idEndpoint,ipAddress) VALUES (?, ?)";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

			for(IpToEndpointDbRecord r: ipAddressList) {
				try {
					preparedStatement.setInt(1, r.getIdEndpoint());
					preparedStatement.setString(2, r.getIpAddress());
					preparedStatement.execute();
				} catch (Exception e) {
					System.out.println(e.getMessage());
				}
			}
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public
	void
	addIpAddressToEndpoints(final List<Integer> endpointId, final String ipAddress) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "MERGE INTO ipTable (idEndpoint, ipAddress) KEY (idEndpoint,ipAddress) VALUES (?, ?)";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

			for(Integer id: endpointId) {
				try {
					preparedStatement.setInt(1, id);
					preparedStatement.setString(2, ipAddress);
					preparedStatement.execute();
				} catch (Exception e) {
					System.out.println(e.getMessage());
				}
			}
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}


	public
	void
	deleteIpAddressToAllEndpoints(final String ipAddress) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "DELETE ipTable WHERE ipAddress = ?";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, ipAddress);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}


	public
	void
	deleteIpAddressToEndpoint(final int endpointId, final String ipAddress) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "DELETE ipTable WHERE idEndpoint = ? AND ipAddress = ?";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

			preparedStatement.setInt(1, endpointId);
			preparedStatement.setString(2, ipAddress);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public
	void
	addIpAddressToEndpoint(final int endpointId, final List<String> ipAddressList) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "MERGE INTO ipTable (idEndpoint,ipAddress) KEY (idEndpoint,ipAddress) VALUES (?, ?)";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

			for(String ip: ipAddressList) {
				try {
					preparedStatement.setInt(1, endpointId);
					preparedStatement.setString(2, ip);
					preparedStatement.execute();
				} catch (Exception e) {
					System.out.println(e.getMessage());
				}
			}
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public
	void
	deleteIpAddressToEndpoint(final int id) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "DELETE FROM ipTable WHERE id=?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
			preparedStatement.setInt(1, id);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}



	public
	IpToEndpointDbRecordList
	getAllIp() throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, idEndpoint, ipAddress FROM ipTable  ";

		IpToEndpointDbRecordList ret = new IpToEndpointDbRecordList();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				Statement preparedStatement = conn.createStatement())	{

			ResultSet rs = preparedStatement.executeQuery(sqlString);
            while ( rs.next() ) {
            	IpToEndpointDbRecord i = new IpToEndpointDbRecord(rs.getInt("id"),
            											  rs.getInt("idEndpoint"),
											              rs.getString("ipAddress")
				            			                  );
            	ret.addIpToEndpointDbRecordLst(i);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public
	IpToEndpointDbRecordList
	getAllIpForEndpoint(final int idEndpoint) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, idEndpoint, ipAddress FROM ipTable WHERE idEndpoint = ? ";

		IpToEndpointDbRecordList ret = new IpToEndpointDbRecordList();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {


			preparedStatement.setInt(1, idEndpoint);

			ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	IpToEndpointDbRecord i = new IpToEndpointDbRecord(rs.getInt("id"),
		            											  rs.getInt("idEndpoint"),
													              rs.getString("ipAddress")
						            			                  );
            	ret.addIpToEndpointDbRecordLst(i);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}



	public
	void
	backUp(String backupFolder) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, "
								+ "configName, "
								+ "configValue, "
								+ "configDescription, "
								+ "configType "
								+ "FROM configTable ";

		ConfigRepoDbRecordList ret = new ConfigRepoDbRecordList();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				Statement preparedStatement = conn.createStatement())	{

			ResultSet rs = preparedStatement.executeQuery(sqlString);
            while ( rs.next() ) {
            	ConfigRepoDbRecord i = new ConfigRepoDbRecord(	rs.getInt("id"),
											            		rs.getString("configName"),
											            		rs.getString("configValue"),
											            		rs.getString("configDescription"),
											            		rs.getString("configType")
					            			                   );
            	ret.addConfigRepoDbRecordLst(i);
            }
            rs.close();
            String c = ret.toString();
            FileUtilWrapper.overwriteFile(backupFolder, "configTable.json", c);
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}


	public
	void
	restore(String restoreFolder) throws Exception {
		String f  = FileUtilWrapper.readFileToString(restoreFolder + "\\configTable.json");
		ConfigRepoDbRecordList c = ConfigRepoDbRecordList.toConfigRepoDbRecordList(f);


		Class.forName(JDBC_DRIVER);
		String sqlString = "INSERT INTO configTable (id, configName, configValue, configDescription, configType) VALUES(?, ?, ?, ?, ?)";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

            assert c != null;
            for(ConfigRepoDbRecord r: c.getConfigRepoDbRecordLst()) {

				preparedStatement.setInt(1, r.getId());
				preparedStatement.setString(2, r.getConfigName());
				preparedStatement.setString(3, r.getConfigValue());
				preparedStatement.setString(4, r.getConfigDescription());
				preparedStatement.setString(5, r.getConfigType());

				preparedStatement.execute();
			}
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}




	/*load config in mem*/

	public static void loadConfigInMem() throws Exception {
		try {
			ConfigRepoDb c = new ConfigRepoDb();

			/*Load configuration vars in mem*/
			ConfigRepoDbRecordList cfg = c.getConfig();
			ConfigRepoDb.configValues.clear();
			ConfigRepoDb.configValues = cfg.getConfigRepoDbRecordLst().stream().collect(Collectors.toMap(ConfigRepoDbRecord::getConfigName, Function.identity()));

			/*Load end-point allowed IP addresses in mem*/
			EndpointDbRecordList ep =c.getEndpoints();
			IpToEndpointDbRecordList ipl =c.getAllIp();
			endpointsWithIp.clear();

			for(EndPointDbRecord r: ep.getEndpointDbRecordLst()) {
				List<String> ipList = ipl.getIpToEndpointDbRecordLst().stream().filter(x->x.getIdEndpoint() == r.getId()).map(IpToEndpointDbRecord::getIpAddress).collect(Collectors.toList());
				endpointsWithIp.put(r.getEndpoint(), ipList);
			}
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}

	}


	public static void reloadEndpointInMem() throws Exception {
		try {
			ConfigRepoDb c = new ConfigRepoDb();

			/*Load end-point allowed IP addresses in mem*/
			EndpointDbRecordList ep =c.getEndpoints();
			IpToEndpointDbRecordList ipl =c.getAllIp();
			endpointsWithIp.clear();

			for(EndPointDbRecord r: ep.getEndpointDbRecordLst()) {
				List<String> ipList = ipl.getIpToEndpointDbRecordLst().stream().filter(x->x.getIdEndpoint() == r.getId()).map(IpToEndpointDbRecord::getIpAddress).collect(Collectors.toList());
				endpointsWithIp.put(r.getEndpoint(), ipList);
			}
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}

	}

	public static  ConfigRepoDbRecord getConfigVar(final String varName) {
		return ConfigRepoDb.configValues.get(varName);
	}

	public static boolean isIpAllowed(	final String endPoint,
										final String ipAddress) {
		List<String> ipEndpoint = ConfigRepoDb.endpointsWithIp.get(endPoint);
		if(ipEndpoint!=null && ipEndpoint.size() == 1 && ipEndpoint.get(0).equals("*") ) {
			return true;
		} else if (ipEndpoint==null || ipEndpoint.isEmpty()){
			return false;
		} else {
			return ipEndpoint.stream().anyMatch(s -> s.equals(ipAddress));
		}
	}


	public static boolean isIpAllowed(	final HttpServletRequest request) {
		String endPoint = request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE).toString();
		String ipAddress = request.getRemoteAddr();
		return isIpAllowed(endPoint,ipAddress);
	}


	public static boolean isLocalHost(final HttpServletRequest request) {
		return Ip4NetUtils.getLocalIpAddresses().contains(request.getRemoteAddr());
	}

	public static boolean isExactIpAllowed(final HttpServletRequest request) {
		String endPoint = request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE).toString();
		String ipAddress = request.getRemoteAddr();
		List<String> ipEndpoint = ConfigRepoDb.endpointsWithIp.get(endPoint);
		return ipEndpoint.stream().anyMatch(s -> s.equals(ipAddress));
	}

	public static boolean isIpInLocalList(	final HttpServletRequest request) {
		return ConfigRepoDb.localIpList.containsKey(request.getRemoteAddr());
	}

	public static boolean isClusterAddress(final HttpServletRequest request) {
		String ipAddress = request.getRemoteAddr();
		return ConfigRepoDb.clusterIp.containsKey(ipAddress);
	}




	public ConfigRepoDbRecordList
	buildDefaultSettings() {
		ConfigRepoDbRecordList cfg = new ConfigRepoDbRecordList();

		ConfigRepoDbRecord c1
		= new ConfigRepoDbRecord(-1,
								"owner",
								"Infinite Loop Software Limited",
								"Name of the company owning this software instance",
								"STRING");
		cfg.addConfigRepoDbRecordLst(c1);
		ConfigRepoDbRecord c2
		= new ConfigRepoDbRecord(-1,
								"backup",
								"./backup",
								"Backup location for internal Dbs",
								"STRING");

		cfg.addConfigRepoDbRecordLst(c2);

		ConfigRepoDbRecord c3
		= new ConfigRepoDbRecord(-1,
								"restore",
								"./restore",
								"Restore location for internal Dbs",
								"STRING");

		cfg.addConfigRepoDbRecordLst(c3);

		ConfigRepoDbRecord c4
		= new ConfigRepoDbRecord(-1,
								"save-adhoc",
								"N",
								"Save Executed Scripts",
								"STRING");

		cfg.addConfigRepoDbRecordLst(c4);
		/*MD2, MD5, SHA-1, SHA-256, SHA-384, SHA-512*/
		ConfigRepoDbRecord c5
		= new ConfigRepoDbRecord(-1,
								"save-adhoc-algo",
								"SHA-256",
								"Adhoc Executed Scripts Used Algo for identification. List of allowed algos: MD2, MD5, SHA-1, SHA-256, SHA-384, SHA-512",
								"STRING");
		cfg.addConfigRepoDbRecordLst(c5);
		return cfg;
	}


	public static void updateInMemConfig(final ConfigRepoDbRecord c) {
		configValues.get(c.getConfigName()).setConfigValue(c.getConfigValue());
		configValues.get(c.getConfigName()).setConfigDescription(c.getConfigDescription());
	}


	public static boolean isURIAllowed(final HttpServletRequest request, AuthUtil authUtil, String methodName) {
		if(request.getRequestURI().equals("/sqlThunder/heartbeat")) {
			return true;
		} else if (request.getRequestURI().isEmpty() || request.getRequestURI().isEmpty()) {  /** calls with Admin accounts*/
			return true;
		} else {
			return authUtil.isSessionAuthenticated(request.getHeader("user"), request.getHeader("session"));
		}
	}
	
	
}
