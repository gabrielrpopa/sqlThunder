/*
 * Copyright 2022-present Infinite Loop Corporation Limited, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.widescope.rdbmsRepo.database.embeddedDb.repo;



import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException; 
import java.sql.Statement;
import java.util.*;

import com.widescope.logging.AppLogger;
import org.springframework.stereotype.Component;



@Component
public class SnapshotDbRepo {

	// JDBC driver name and database URL 
	private final String JDBC_DRIVER = "org.h2.Driver";   
	private final String DB_URL_DISK = "jdbc:h2:file:./snapshotsDbRepo;MODE=PostgreSQL";
	
	//  Database credentials 
	private final String USER = "sa"; 
	private final String PASS = "sa"; 
	
	public SnapshotDbRepo()	{}

	private 
	void 
	closeHandles(	Connection conn, 
					Statement statement, 
					ResultSet rs){
		try	{ if(rs !=null && !rs.isClosed()) { rs.close();	} }	catch(Exception ignored)	{}
		try	{ if(statement !=null && !statement.isClosed()) { statement.close();	} }	catch(Exception ignored)	{}
		try	{ if(conn !=null && !conn.isClosed()) { conn.close();	} }	catch(Exception ignored)	{}
	}
	
	

	private 
	void
	createSchema(final List<String> ddlList) throws Exception	{
		Connection conn = null;
		Statement statement = null; 
		try { 
			Class.forName(JDBC_DRIVER);
			conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			statement = conn.createStatement();
			for (String ddl : ddlList) {
				statement.executeUpdate(ddl);
	        }
			
			statement.close();
			conn.commit();
			conn.close();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		} finally	{
			closeHandles(conn, statement, null);
	    } 
	}

	
		

	
	
	public 
	static 
	void generateSchema() throws Exception {
		try {
			List<String> ddlList = new java.util.ArrayList<String>();
			ddlList.add(SnapshotDbRepo.snapshotDbRef);
			ddlList.add(SnapshotDbRepo.snapshotDbRepoRef_index1);
			ddlList.add(SnapshotDbRepo.snapshotDbRepoRef_index2);
			ddlList.add(SnapshotDbRepo.snapshotDbRepoRef_const1);
			ddlList.add(SnapshotDbRepo.snapshotDbRepoRefAccessRef);
			ddlList.add(SnapshotDbRepo.snapshotDbRepoRefAccessRef_index1);
			ddlList.add(SnapshotDbRepo.snapshotDbRepoRefAccessRef_fk1);

			SnapshotDbRepo dataSnapshotDbRepo = new SnapshotDbRepo();
			dataSnapshotDbRepo.createSchema(ddlList);
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	

	public
	static
	List<String> dbTypes = Arrays.asList(new String[] { "H2", "HSQLDB", "DERBY", "SQLITE", "BERKELEY", "CSV", "PARQUET" });


	private
	static
	String snapshotDbRef = "CREATE TABLE IF NOT EXISTS snapshotDbRepoRef (snapshotId BIGINT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,\r\n"
																		+ "	fileName VARCHAR(999), \r\n"
																		+ "	sqlName VARCHAR(999), \r\n"
																		+ "	type VARCHAR(999), \r\n"
																		+ "	userId BIGINT, \r\n"
																		+ "	timestamp BIGINT, \r\n"
																		+ "	sqlStatement VARCHAR(9999) \r\n"
																		+ ")";
		
	private
	static
	String snapshotDbRepoRef_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_snapshotDbRepoRef_1 ON snapshotDbRepoRef(userId, fileName);";
	
	private
	static
	String snapshotDbRepoRef_index2 = "CREATE INDEX IF NOT EXISTS idx_snapshotDbRepoRef_2 ON snapshotDbRepoRef(sqlName);";
	
	private
	static
	String snapshotDbRepoRef_const1 = "ALTER TABLE snapshotDbRepoRef ADD CONSTRAINT IF NOT EXISTS ck_snapshotDbRepoRef_1  CHECK (type IN ('CSV', 'ResultQuery') );";

	
	public
	static
	String snapshotDbRepoRefAccessRef = "CREATE TABLE IF NOT EXISTS " +
							"snapshotDbRepoRefAccessRef (accessId BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,\r\n"
													+ "	snapshotId BIGINT,\r\n"
													+ "	userId BIGINT)";


	private
	static
	String snapshotDbRepoRefAccessRef_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_snapshotDbRepoRef_1 ON snapshotDbRepoRef(snapshotId, userId);";

	private
	static
	String	snapshotDbRepoRefAccessRef_fk1 = "ALTER TABLE snapshotDbRepoRefAccessRef ADD CONSTRAINT IF NOT EXISTS snapshotDbRepoRefAccessRefFk_1 FOREIGN KEY ( snapshotId ) REFERENCES snapshotDbRepoRef( snapshotId );";




	public
	SnapshotDbRecord
	getAllUserSnapshotDb(final long userId) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT snapshotId, "
								+ " fileName, "
								+ " sqlName, "
								+ " type, "
								+ " userId, "
								+ " timestamp, "
								+ " sqlStatement, "
								+ " FROM snapshotDbRepoRef d JOIN snapshotDbRepoRefAccessRef a ON d.userId = a.userId"
								+ " WHERE a.userId = ?";

		SnapshotDbRecord snapshotDbRecord = null;

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, userId);
			ResultSet rs = preparedStatement.executeQuery(sqlString);
			if(rs.next()) {
				snapshotDbRecord = new SnapshotDbRecord(rs.getLong("snapshotId"),
														rs.getString("fileName"),
														rs.getString("sqlName"),
														rs.getString("type"),
														rs.getLong("userId"),
														rs.getLong("timestamp"),
														rs.getString("sqlStatement")
				);
			}

			rs.close();
			return snapshotDbRecord;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	
	
	public
	SnapshotDbRecordList
	getUserSnapshotDb(	final long userId,
						final long startTime,
						final long endTime,
						final String sqlStatement) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString1 = "SELECT d.snapshotId, "
								+ " d.fileName, "
								+ " d.sqlName, "
								+ " d.type, "
								+ " d.userId, "
								+ " d.timestamp, "
								+ " d.sqlStatement, "
								+ " FROM snapshotDbRepoRef d JOIN snapshotDbRepoRefAccessRef a ON d.userId = a.userId"
								+ " WHERE a.userId = ? "
								+ " AND timestamp >= ? "
								+ " AND timestamp <= ? "
								+ " AND sqlStatement LIKE ?";


		String sqlString2 = "SELECT d.snapshotId, "
							+ " d.fileName, "
							+ " d.type, "
							+ " d.sqlName, "
							+ " d.userId, "
							+ " d.timestamp, "
							+ " d.sqlStatement, "
							+ " FROM snapshotDbRepoRef d JOIN snapshotDbRepoRefAccessRef a ON d.userId = a.userId"
							+ " WHERE a.userId = ? "
							+ " AND timestamp >= ? "
							+ " AND timestamp <= ? ";


		String sqlString = null;

		if(sqlStatement == null || sqlStatement.trim().isBlank()) {
			sqlString = sqlString2;
		} else {
			sqlString = sqlString1;
		}


		SnapshotDbRecordList ret = new SnapshotDbRecordList();

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			
			if(sqlStatement == null || sqlStatement.trim().isBlank()) {
				preparedStatement.setLong(1, userId);
				preparedStatement.setLong(2, startTime);
				preparedStatement.setLong(3, endTime);
			} else {
				preparedStatement.setLong(1, userId);
				preparedStatement.setLong(2, startTime);
				preparedStatement.setLong(3, endTime);
				preparedStatement.setString(4, "%" + sqlStatement + "%");
			}
			
			List<SnapshotDbRecord> lst = new ArrayList<>();
			try(ResultSet rs = preparedStatement.executeQuery()) {
				while ( rs.next() ) {
					SnapshotDbRecord 
					snapshotDbRecord = new SnapshotDbRecord(rs.getLong("snapshotId"),
															rs.getString("fileName"),
															rs.getString("sqlName"),
															rs.getString("type"),
															rs.getLong("userId"),
															rs.getLong("timestamp"),
															rs.getString("sqlStatement")
															);
					lst.add(snapshotDbRecord);
				}
			}
			
			ret.setSnapshotDbRecordList(lst);
			return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}



	public
	SnapshotDbRecordList
	getUserSnapshotDb(	final long userId,
						final long startTime,
						final long endTime) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT d.snapshotId, "
								+ " d.fileName, "
								+ " d.sqlName, "
								+ " d.type, "
								+ " d.userId, "
								+ " d.timestamp, "
								+ " d.sqlStatement, "
								+ " FROM snapshotDbRepoRef d JOIN snapshotDbRepoRefAccessRef a ON d.userId = a.userId"
								+ " WHERE a.userId = ? "
								+ " AND timestamp >= ? "
								+ " AND timestamp <= ? "
								;
		
		
		
		
		
		SnapshotDbRecordList ret = new SnapshotDbRecordList();

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			
			preparedStatement.setLong(1, userId);
			preparedStatement.setLong(2, startTime);
			preparedStatement.setLong(3, endTime);
			
			List<SnapshotDbRecord> lst = new ArrayList<SnapshotDbRecord>();
			try(ResultSet rs = preparedStatement.executeQuery()) {
				while ( rs.next() ) {
					SnapshotDbRecord 
					snapshotDbRecord = new SnapshotDbRecord(rs.getLong("snapshotId"),
															rs.getString("fileName"),
															rs.getString("sqlName"),
															rs.getString("type"),
															rs.getLong("userId"),
															rs.getLong("timestamp"),
															rs.getString("sqlStatement")
															);
					lst.add(snapshotDbRecord);
				}
			}
			
			ret.setSnapshotDbRecordList(lst);
			return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public
	SnapshotDbRecord
	getSnapshot(final long snapshotId) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT snapshotId, "
								+ " fileName, "
								+ " sqlName, "
								+ " type, "
								+ " userId, "
								+ " timestamp, "
								+ " sqlStatement, "
								+ " FROM snapshotDbRepoRef WHERE snapshotId = ? " ;
		
	
		
		
		SnapshotDbRecord ret = new SnapshotDbRecord();

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, snapshotId);
			try(ResultSet rs = preparedStatement.executeQuery()) {
				if(rs.next()) {
					ret = new SnapshotDbRecord(rs.getLong("snapshotId"),
							rs.getString("fileName"),
							rs.getString("sqlName"),
							rs.getString("type"),
							rs.getLong("userId"),
							rs.getLong("timestamp"),
							rs.getString("sqlStatement")
					);
				}
			}
			
			return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public
	long
	getSnapshot(final long timestamp, final String fileName) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT snapshotId FROM snapshotDbRepoRef WHERE timestamp = ? AND fileName = ?" ;

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, timestamp);
			preparedStatement.setString(2, fileName);
			try(ResultSet rs = preparedStatement.executeQuery()) {
				if(rs.next()) {
					return rs.getLong("snapshotId");
				} else {
					return -1;
				}
			}
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public
	void
	addSnapshotDb(final SnapshotDbRecord snapshotDbRecord)	throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "INSERT INTO snapshotDbRepoRef ( fileName, sqlName, type, userId, timestamp, sqlStatement) VALUES(?, ?, ?, ?, ?, ?)";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, snapshotDbRecord.getFileName());
			preparedStatement.setString(2, snapshotDbRecord.getSqlName());
			preparedStatement.setString(3, snapshotDbRecord.getType());
			preparedStatement.setLong(4, snapshotDbRecord.getUserId());
			preparedStatement.setLong(5, snapshotDbRecord.getTimestamp());
			preparedStatement.setString(6, snapshotDbRecord.getSqlStatement());
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
		
		
		
		
		
	}

	public
	void
	deleteSnapshotDb(final long snapshotId) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "DELETE FROM snapshotDbRepoRef WHERE snapshotId=?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
			preparedStatement.setLong(1, snapshotId);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}


	public
	void
	addSnapshotDbAccess(final long snapshotId,
						final long userId)	throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "MERGE INTO snapshotDbRepoRefAccessRef (snapshotId, userId) KEY (snapshotId, userId) VALUES ( ?, ?) ";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, snapshotId);
			preparedStatement.setLong(2, userId);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public
	void
	deleteSnapshotDbAccess(final long accessId) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "DELETE FROM snapshotDbRepoRefAccessRef WHERE accessId = ?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
			preparedStatement.setLong(1, accessId);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public
	void
	deleteSnapshotDbAccessForSnapshot(final long snapshotId) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "DELETE FROM snapshotDbRepoRefAccessRef WHERE snapshotId = ?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
			preparedStatement.setLong(1, snapshotId);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

}

