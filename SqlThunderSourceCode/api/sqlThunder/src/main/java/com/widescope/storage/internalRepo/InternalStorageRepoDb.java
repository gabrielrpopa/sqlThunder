/*
 * Copyright 2024-present Infinite Loop Corporation Limited, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.widescope.storage.internalRepo;



import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException; 
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import com.widescope.logging.AppLogger;
import org.springframework.stereotype.Component;

@Component
public class InternalStorageRepoDb {


	// JDBC driver name and database URL 
	private final String JDBC_DRIVER = "org.h2.Driver";   
	private final String DB_URL_DISK = "jdbc:h2:file:./storageRepo;MODE=PostgreSQL";  
	
	//  Database credentials 
	private final String USER = "sa"; 
	private final String PASS = "sa"; 
	
	public InternalStorageRepoDb()	{}
	
		   
	
	private 
	void 
	closeHandles(	Connection conn, 
					Statement statement, 
					ResultSet rs){
		try	{ if(rs !=null && !rs.isClosed()) { rs.close();	} }	catch(Exception ignored)	{}
		try	{ if(statement !=null && !statement.isClosed()) { statement.close();	} }	catch(Exception ignored)	{}
		try	{ if(conn !=null && !conn.isClosed()) { conn.close();	} }	catch(Exception ignored)	{}
	}
	
	

	private 
	void
	createSchema(final List<String> ddlList) throws Exception	{
		Connection conn = null;
		Statement statement = null; 
		try { 
			Class.forName(JDBC_DRIVER);
			conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			statement = conn.createStatement();
			for (String ddl : ddlList) {
				statement.executeUpdate(ddl);
	        }
			
			statement.close();
			conn.commit();
			conn.close();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		} finally	{
			closeHandles(conn, statement, null);
	    } 
	}

	
		

	
	
	public 
	static 
	void generateSchema() throws Exception {
		List<String> ddlList = new java.util.ArrayList<String>();
		
			
		ddlList.add(InternalStorageRepoDb.fileStorageTable);
		ddlList.add(InternalStorageRepoDb.fileStorageTable_index1);
		ddlList.add(InternalStorageRepoDb.storageTablePrivs);
		ddlList.add(InternalStorageRepoDb.storageTablePrivs_index1);
		ddlList.add(InternalStorageRepoDb.storagePrivTable_const1);

		
		InternalStorageRepoDb f = new InternalStorageRepoDb();
		f.createSchema(ddlList);
	}
	

	
	////////////////////////////////////// Storage table - //////////////////////////////////////////////////////
	
	public 
	static 
	String 
	fileStorageTable = "CREATE TABLE IF NOT EXISTS "
				+ " fileStorageTable (storageId BIGINT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,\r\n"
									+ "	userId BIGINT, \r\n"
									+ "	fileName VARCHAR(999), \r\n"
									+ "	fullFilePath VARCHAR(9999), \r\n"
									+ "	storageType VARCHAR(9999), \r\n"
									+ "	lastModified BIGINT, \r\n"
									+ "	timeStamp BIGINT, \r\n"
									+ "	machineName VARCHAR(9999) \r\n"
								+ ")";
		
	public static 
	String 
	fileStorageTable_index1
	= "CREATE UNIQUE INDEX IF NOT EXISTS idx_fileStorageTable_2 ON fileStorageTable(userId, lastModified, fileName);";
	
		
	
	public 
	static 
	String 
	storageTablePrivs = "CREATE TABLE IF NOT EXISTS "
					+ " filePrivTable (	privId BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,\r\n"
									+ "	storageId BIGINT,\r\n"
									+ "	userId BIGINT ,\r\n"
									+ "	privType VARCHAR(99) \r\n"
									+ ")";
	
	public static String 
	storageTablePrivs_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_filePrivTable_1 ON filePrivTable(userId);";
	
	/* 'D' - download, 'P' - process, 'A' - ADMIN, including delete */
	public static String storagePrivTable_const1 = "ALTER TABLE filePrivTable ADD CONSTRAINT IF NOT EXISTS ck_filePrivTable_1  CHECK (privType IN ('D', 'P', 'A') );";
	
	
	
	public void 
	addFile(final InternalFileStorageRecord f) throws Exception {

		String sqlString = "INSERT INTO fileStorageTable (userId, fileName, fullFilePath, storageType, lastModified, timeStamp, machineName) "
							+ " VALUES (?, ?, ?, ?, ?, ?, ?)";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			
			preparedStatement.setLong(1, f.getUserId());
			preparedStatement.setString(2, f.getFileName());
			preparedStatement.setString(3, f.getFullFilePath());
			preparedStatement.setString(4, f.getStorageType());
			preparedStatement.setLong(5, f.getLastModified());
			preparedStatement.setLong(6, f.getTimeStamp());
			preparedStatement.setString(7, f.getMachineName());

			preparedStatement.execute();

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public 
	InternalFileStorageList
	getFiles(final long userId) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT f.storageId, "
								+ "	f.userId, "
								+ " f.fileName, "
								+ " f.fullFilePath, "
								+ " f.storageType, "
								+ " f.lastModified, "
								+ " f.timeStamp, "
								+ " f.machineName "
						+ " FROM fileStorageTable f "
						+ " WHERE f.userId = ?"
								+ " UNION "
						+ " SELECT f.storageId, "
								+ "	f.userId, "
								+ "	f.fileName, "
								+ "	f.fullFilePath, "
								+ "	f.storageType, "
								+ "	f.lastModified, "
								+ "	f.timeStamp, "
								+ "	f.machineName "
						+ "	FROM fileStorageTable f JOIN filePrivTable p ON f.storageId = p.storageId"
						+ "	WHERE p.userId = ?";
		
		InternalFileStorageList ret = new InternalFileStorageList();
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			
            preparedStatement.setLong(1, userId);
            preparedStatement.setLong(2, userId);
            
			ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	InternalFileStorageRecord r = new InternalFileStorageRecord(rs.getLong("storageId"), 
		            								rs.getLong("userId"),
		            								rs.getString("machineName"),
		            								rs.getString("fileName"),
											     	rs.getString("fullFilePath"), 
											     	rs.getString("storageType"),
											     	rs.getLong("lastModified"),
											     	rs.getLong("timeStamp")
										     	);
            	ret.getFileStorageTableDbRecordLst().add(r);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	
	
	public 
	InternalStoragePrivList
	getUsersAssociatedToFile(final long storageId) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT privId, "
								+ "	storageId, "
								+ " userId, "
								+ " privType "
						+ " FROM filePrivTable "
						+ " WHERE storageId = ?";
		
		
		
		InternalStoragePrivList ret = new InternalStoragePrivList();
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			
            preparedStatement.setLong(1, storageId);
            
			ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	InternalStoragePriv r = new InternalStoragePriv(rs.getLong("privId"), 
					            								rs.getLong("storageId"),
					            								rs.getLong("userId"),
					            								rs.getString("privType")
													     		);
            	ret.getStoragePrivRepoDbRecordLst().add(r);
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	public 
	InternalFileStorageRecord 
	getFile(final long storageId) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT storageId, userId, fileName, fullFilePath, storageType, lastModified, timeStamp, machineName "
								+ "FROM fileStorageTable WHERE storageId = ? ";
		
		InternalFileStorageRecord r = null;
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            preparedStatement.setLong(1, storageId);
			ResultSet rs = preparedStatement.executeQuery();
			if(rs.next()) {
				r = new InternalFileStorageRecord(	rs.getLong("storageId"),
													rs.getLong("userId"),
													rs.getString("machineName"),
													rs.getString("fileName"),
													rs.getString("fullFilePath"),
													rs.getString("storageType"),
													rs.getLong("lastModified"),
													rs.getLong("timeStamp")
				);
			}

            rs.close();
            return r;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	
	
	
	
	public boolean 
	deleteFile(final long storageId) throws Exception {
		String sqlString = "DELETE fileStorageTable WHERE storageId = ?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, storageId);
			preparedStatement.execute();
		} catch (SQLException e)	{
			AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]);
			return false;
		} catch (Exception e) {
			AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db);
			return false;
		}
        return deletePrivs(storageId);
	}
	
	
	
	
	public boolean 
	deletePrivs(final long storageId) {
		String deleteMql = "DELETE filePrivTable WHERE storageId = ?" ;
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(deleteMql))	{
			preparedStatement.setLong(1, storageId);
			preparedStatement.execute();
			return true;
		} catch (SQLException e)	{
			AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]);
			return false;
		} catch (Exception e) {
			AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db);
			return false;
		}
	}
	
	
	public List<InternalStoragePriv> 
	getPrivs( final long storageId) throws Exception {
		List<InternalStoragePriv> ret = new ArrayList<InternalStoragePriv>();
		String sqlString = "SELECT privId, storageId, userId, privType FROM filePrivTable WHERE storageId = ?";
		
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, storageId);
			ResultSet rs = preparedStatement.executeQuery();
			while ( rs.next() ) {
				InternalStoragePriv p = new InternalStoragePriv(rs.getLong("privId") ,
													            		rs.getLong("storageId"), 
													            		rs.getLong("userId"),
													            		rs.getString("privType") );
				
				
				ret.add(p);
			}
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
		
		return ret;
	}
	
	public InternalStoragePriv 
	getPrivs( final long storageId, final long userId) throws Exception {

		InternalStoragePriv ret = null;
		String sqlString = "SELECT privId, storageId, userId, privType FROM filePrivTable WHERE storageId = ? AND userId = ?";
		
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, storageId);
			preparedStatement.setLong(2, userId);
			ResultSet rs = preparedStatement.executeQuery();
			if(rs.next()) {
				ret = new InternalStoragePriv(	rs.getLong("privId") ,
												rs.getLong("storageId"),
												rs.getLong("userId"),
												rs.getString("privType") );
			}

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
		
		return ret;
	}
	
	
	
	public void 
	mergePrivs(	final long storageId,
				final long userId,
				final String privType) throws Exception {
		String sqlString = "MERGE INTO filePrivTable (storageId, userId, privType) KEY (storageId, userId)  VALUES (?, ?, ?)";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, storageId);
			preparedStatement.setLong(2, userId);
			preparedStatement.setString(3, privType);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public void 
	deletePrivs(final long storageId,
				final long userId) throws Exception {
		String sqlString = "DELETE filePrivTable WHERE storageId = ? AND userId = ?";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, storageId);
			preparedStatement.setLong(2, userId);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	public void 
	deleteUserPrivs(final long userId) throws Exception {

		String sqlString = "DELETE filePrivTable WHERE userId = ?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(2, userId);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	
	
}

