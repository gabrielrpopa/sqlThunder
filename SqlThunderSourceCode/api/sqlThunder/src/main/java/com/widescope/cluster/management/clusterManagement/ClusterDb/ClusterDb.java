/*
 * Copyright 2022-present Infinite Loop Corporation Limited, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.widescope.cluster.management.clusterManagement.ClusterDb;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException; 
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import com.widescope.logging.AppLogger;
import org.springframework.stereotype.Component;
import com.widescope.cluster.management.healthCheck.PingNodes;
import com.widescope.sqlThunder.config.configRepo.ConfigRepoDb;


@Component
public class ClusterDb {

	public static String ownBaseUrl = "";

	// JDBC driver name and database URL 
	private final String JDBC_DRIVER = "org.h2.Driver";
	private final String DB_URL_DISK = "jdbc:h2:file:./cluster;MODE=PostgreSQL";
	
	   
	//  Database credentials 
	private final String USER = "sa"; 
	private final String PASS = "sa"; 



	
	
	public ClusterDb(){
	}

	public static ClusterDb newClusterDb(){
		return new ClusterDb();
	}
		   
	
	private void closeHandles(	Connection conn, 
								Statement statement, 
								ResultSet rs) {
		try	{ if(rs !=null && !rs.isClosed()) { rs.close();	} }	catch(Exception ignored)	{}
		try	{ if(statement !=null && !statement.isClosed()) { statement.close();	} }	catch(Exception ignored)	{}
		try	{ if(conn !=null && !conn.isClosed()) { conn.close();	} }	catch(Exception ignored)	{}
	}
	
	
	
	
	public void createSchema(List<String> ddlList) throws Exception {
		Connection conn = null;
		Statement statement = null; 
		try { 
			// STEP 1: Register JDBC driver 
			Class.forName(JDBC_DRIVER); 
	             
			//STEP 2: Open a connection 

			System.out.println("Connecting to Logging Cluster database..." );
			conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);  
	         
			//STEP 3: Execute a query 
			statement = conn.createStatement(); 
			
			for (String ddl : ddlList) {
				statement.executeUpdate (ddl);
	        }

			System.out.println("Created Logging Cluster....  " );

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		} finally {
			closeHandles(conn, statement, null);
	    } 
	}

	
	
	

	
	
	public static ClusterDb generateSchema() throws Exception {
		try {
			List<String> ddlList = new java.util.ArrayList<String>();
			ddlList.add(ClusterDb.cluster_nodes);
			ddlList.add(ClusterDb.cluster_const1);
			ddlList.add(ClusterDb.cluster_const2);
			ddlList.add(ClusterDb.cluster_const3);
			ddlList.add(ClusterDb.cluster_index1);


			ClusterDb h2OperationDisk = new ClusterDb();
			h2OperationDisk.createSchema(ddlList);
			return h2OperationDisk;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	

	
	
	

	public static String cluster_nodes = "CREATE TABLE IF NOT EXISTS cluster(id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
																				+ "	baseUrl VARCHAR(MAX),"
																				+ " type VARCHAR(MAX),"
																				+ " isAccepted VARCHAR(1) DEFAULT 'N' ,"
																				+ " isRegistered VARCHAR(1) DEFAULT 'N' "
																				+ ")";
	
	public static String cluster_const1 = "ALTER TABLE cluster ADD CONSTRAINT IF NOT EXISTS ck_cluster_1  CHECK (type IN ('GATE', 'EXECUTOR', 'STORAGE') );";
	public static String cluster_const2 = "ALTER TABLE cluster ADD CONSTRAINT IF NOT EXISTS ck_cluster_2  CHECK (isAccepted IN ('Y', 'N') );";
	public static String cluster_const3 = "ALTER TABLE cluster ADD CONSTRAINT IF NOT EXISTS ck_cluster_3  CHECK (isRegistered IN ('Y', 'N') );";
	public static String cluster_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_cluster_1 ON cluster(baseUrl);";



	public void addNode(final String baseUrl,
						final String type,
						final String isAccepted,
						final String isRegistered) throws Exception {

		Class.forName(JDBC_DRIVER);
		String sqlString = "INSERT INTO cluster (baseUrl, type, isAccepted, isRegistered) VALUES(?, ?, ?, ?)";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))
		{
			preparedStatement.setString(1, baseUrl);
            preparedStatement.setString(2, type);
            preparedStatement.setString(3, isAccepted);
            preparedStatement.setString(4, isRegistered);
            preparedStatement.executeUpdate();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	
	public static void addNode_(final String baseUrl, 
								final String type,
								final String isAccepted,
								final String isRegistered
					            ) throws Exception
	{
		ClusterDb clusterDb = new ClusterDb();
		clusterDb.addNode(	baseUrl, type, isAccepted, isRegistered);
	}

	
	
	public void addNodes(final MachineNodeList l) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlInsert = "INSERT INTO cluster (baseUrl, type, isAccepted, isRegistered) VALUES(?, ?, ?, ?)";
		String sqlQuery = "SELECT id, baseUrl, type ,isAccepted, isRegistered FROM cluster";
        PreparedStatement preparedStatement = null;
        try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); Statement statement = conn.createStatement()) {
            ResultSet result = statement.executeQuery(sqlQuery);
            List<String> nodes = new ArrayList<String>();
            while (result.next()) {
                String baseUrl = result.getString("baseUrl");
                nodes.add(baseUrl);
            }

            for (MachineNode node : l.getServerCounterpartyList()) {
                if (!nodes.contains(node.getBaseUrl())) {
                    preparedStatement = conn.prepareStatement(sqlInsert);
                    preparedStatement.setString(1, node.getBaseUrl());
                    preparedStatement.setString(2, node.getType());
                    preparedStatement.setString(3, node.getIsAccepted());
                    preparedStatement.setString(4, node.getIsRegistered());
                    preparedStatement.executeUpdate();
                    preparedStatement.close();
                }
            }
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	
		
	
	public List<MachineNode> getAllNodesFromDb() throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, baseUrl, type, isAccepted, isRegistered FROM cluster ORDER BY type";
		List<MachineNode> ret = new ArrayList<>();
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))  {
            ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	MachineNode b = new MachineNode(rs.getInt("id"),
            			                        rs.getString("baseUrl"), 
            			                        rs.getString("type"),
            			                        rs.getString("isAccepted"),
            			                        rs.getString("isRegistered"),
            			                        "N"
	           			                        );
            	
            	ret.add(b);
            }
            rs.close();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
		
		return ret;
	}
	
	
	public List<MachineNode> getAllNodesFromDbExcludingOwn() throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, baseUrl, type, isAccepted, isRegistered FROM cluster ORDER BY type";
		List<MachineNode> ret = new ArrayList<>();
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); PreparedStatement preparedStatement = conn.prepareStatement(sqlString))
		{
            ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	MachineNode b = new MachineNode(rs.getInt("id"),
            			                        rs.getString("baseUrl"), 
            			                        rs.getString("type"),
            			                        rs.getString("isAccepted"),
            			                        rs.getString("isRegistered"),
            			                        "N"
	           			                        );
            	
            	if(ClusterDb.ownBaseUrl.compareToIgnoreCase(b.getBaseUrl()) != 0)
            		ret.add(b);
            }
            rs.close();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
		
		return ret;
	}
	
	
	public MachineNode getNode(final int id) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, baseUrl, type ,isAccepted, isRegistered FROM cluster WHERE id = " + id;
		MachineNode ret = new MachineNode();
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))
		{
			//preparedStatement.setInt(id);
            ResultSet rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
            	ret = new MachineNode(rs.getInt("id"),
            			              rs.getString("baseUrl"), 
            			              rs.getString("type"),
            			              rs.getString("isAccepted"),
  			                          rs.getString("isRegistered"),
            			              "N"
	           			              );

            }
            rs.close();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
		
		return ret;
	}
	
	
	public MachineNode getNode(final String baseUrl) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, baseUrl, type, isAccepted, isRegistered FROM cluster WHERE baseUrl = ?" ;
		MachineNode ret = new MachineNode();
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))
		{
			preparedStatement.setString(1, baseUrl);
            ResultSet rs = preparedStatement.executeQuery();
            if ( rs.next() ) {
            	ret = new MachineNode(rs.getInt("id"),
            			              rs.getString("baseUrl"), 
            			              rs.getString("type"),
            			              rs.getString("isAccepted"),
  			                          rs.getString("isRegistered"),
            			              "N"
	           			              );
            }
            rs.close();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
		
		return ret;
	}

	

	public boolean deleteNode(final int id) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "DELETE cluster WHERE id = ?";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            preparedStatement.setInt(1, id);
          
            int row = preparedStatement.executeUpdate();
            return row == 1;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public boolean deleteNode(final String baseUrl) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "DELETE cluster WHERE baseUrl = ?";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, baseUrl);

			int row = preparedStatement.executeUpdate();
			return row == 1;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	
	
	public static void updateClusterStatus() throws Exception {
		ClusterDb c = new ClusterDb();
		try {
			Set<String> allIp = new HashSet<>();
			List<MachineNode> allServers = c.getAllNodesFromDbExcludingOwn();
			if(allServers.isEmpty()) {
				System.out.println("no servers in cluster to check");
				return;
			}
			
			Set<String> allBaseUrl = allServers.stream().map(MachineNode::getBaseUrl).collect(Collectors.toSet());
			
			ConfigRepoDb.clusterNodes.entrySet().removeIf(e -> !allBaseUrl.contains(e.getKey())); /*remove if not exists*/
			
			allServers  = PingNodes.pingAllCounterparties_(allServers);
			allServers  = PingNodes.queryAllCounterparties(allServers);
			for(MachineNode node: allServers) {
				if(ClusterDb.ownBaseUrl.compareToIgnoreCase(node.getBaseUrl()) != 0 ) {
					ConfigRepoDb.clusterNodes.put(node.getBaseUrl(), node);
					for(String ip: node.getIpList()) {
						if(ip.equals("127.0.0.1") || ip.equals("0:0:0:0:0:0:0:1")) {
							allIp.add(ip);
						}
					}
				}
			}
			
			ConfigRepoDb.clusterIp.entrySet().removeIf(e -> !allIp.contains(e.getKey())); /*remove if not exists first*/
			for(String ip: allIp) {
				ConfigRepoDb.clusterIp.put(ip, ip);	
			}
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
}

