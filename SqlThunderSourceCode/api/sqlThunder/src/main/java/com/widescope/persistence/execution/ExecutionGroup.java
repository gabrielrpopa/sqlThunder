package com.widescope.persistence.execution;

import com.widescope.logging.AppLogger;

import java.sql.*;

public class ExecutionGroup {


    /*Groups are useful for providing opportunity to users to group backups*/
    public static final
    String groupTable = "CREATE TABLE IF NOT EXISTS groupTable( groupId BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
                                                            + "	groupName VARCHAR(MAX), "
                                                            + "	comment VARCHAR(MAX) "
                                                            + ")";

    public static final
    String groupTableIndex1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_groupNameTable_1 ON groupTable(groupName);";


    public static final
    String createTestGroup = "INSERT INTO groupTable (groupName, comment) VALUES ('TEST', 'This is the test default group')";


    public static final
    String createDefaultWebGroup = "INSERT INTO groupTable (groupName, comment) VALUES ('WEB', 'This is web execution default group')";


    public static void
    addArtifactGroup(final String groupName,
                     final String comment,
                     final String JDBC_DRIVER,
                     final String DB_URL_DISK,
                     final String USER,
                     final String PASS) throws Exception {

        Class.forName(JDBC_DRIVER);
        String sqlString = "INSERT INTO groupTable (groupName, comment)  VALUES (?, ?)";

        try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
             PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            preparedStatement.setString(1, groupName);
            preparedStatement.setString(2, comment);
            preparedStatement.execute();
        } catch (SQLException e)	{
            throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
        } catch (Exception e) {
            throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
        }
    }

    public static PersistenceGroupList
    getArtifactGroups(final String txt,
                      final String JDBC_DRIVER,
                      final String DB_URL_DISK,
                      final String USER,
                      final String PASS) throws Exception {
            Class.forName(JDBC_DRIVER);
            PersistenceGroupList ret = new PersistenceGroupList();
            String sqlString = "SELECT groupId, groupName, comment FROM groupTable WHERE groupName LIKE ? OR comment LIKE ?";
            try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
                 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
                preparedStatement.setString(1, "%" + txt + "%");
                preparedStatement.setString(2, "%" + txt + "%");
                ResultSet rs = preparedStatement.executeQuery();
                while(rs.next()) {
                    PersistenceGroup p = new PersistenceGroup(	rs.getLong("groupId") ,
                                                                rs.getString("groupName"),
                                                                rs.getString("comment") );
                    ret.addItem(p);
                }

            } catch (SQLException e)	{
                throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
            } catch (Exception e) {
                throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
            }

            return ret;
    }



    public static PersistenceGroup
    getArtifactGroup(final String groupName,
                     final String JDBC_DRIVER,
                     final String DB_URL_DISK,
                     final String USER,
                     final String PASS) throws Exception {
        Class.forName(JDBC_DRIVER);
        PersistenceGroup ret = new PersistenceGroup(-1, groupName, null);
        String sqlString = "SELECT groupId, groupName, comment FROM groupTable WHERE groupName = ?";
        try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
             PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            preparedStatement.setString(1, groupName);
            ResultSet rs = preparedStatement.executeQuery();
            if(rs.next()) {
                ret = new PersistenceGroup(	rs.getLong("groupId"), rs.getString("groupName"), rs.getString("comment") );
            }
        } catch (SQLException e)	{
            throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
        } catch (Exception e) {
            throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
        }
        return ret;
    }

    public static void
    deleteArtifactGroup(final long groupId,
                        final String JDBC_DRIVER,
                        final String DB_URL_DISK,
                        final String USER,
                        final String PASS) throws Exception {
        Class.forName(JDBC_DRIVER);
        String sqlString = "DELETE groupTable WHERE groupId = ? ";
        try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
             PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            preparedStatement.setLong(1, groupId);
            preparedStatement.execute();
        } catch (SQLException e)	{
            throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
        } catch (Exception e) {
            throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
        }
    }


}
