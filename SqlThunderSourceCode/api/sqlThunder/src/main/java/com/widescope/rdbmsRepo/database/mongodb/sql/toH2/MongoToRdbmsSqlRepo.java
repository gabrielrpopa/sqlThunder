/*
 * Copyright 2022-present Infinite Loop Corporation Limited, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.widescope.rdbmsRepo.database.mongodb.sql.toH2;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException; 
import java.sql.Statement;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.widescope.logging.AppLogger;
import org.springframework.stereotype.Component;





 

@Component
public class MongoToRdbmsSqlRepo {

	// JDBC driver name and database URL 
	private final String JDBC_DRIVER = "org.h2.Driver";   
	private final String DB_URL_DISK = "jdbc:h2:file:./mongoToRdbmsSqlRepo;MODE=PostgreSQL";
	   
	//  Database credentials 
	private final String USER = "sa"; 
	private final String PASS = "sa"; 

	public MongoToRdbmsSqlRepo() {	}
	
		
	private void closeHandles(Connection conn, 
							  Statement statement, 
							  ResultSet rs)	{
		try	{ if(rs !=null && !rs.isClosed()) { rs.close();	} }	catch(Exception ignored)	{}
		try	{ if(statement !=null && !statement.isClosed()) { statement.close();	} }	catch(Exception ignored)	{}
		try	{ if(conn !=null && !conn.isClosed()) { conn.close();	} }	catch(Exception ignored)	{}
	}
	
	public void createSchema(final List<String> ddlList) throws Exception {
		Connection conn = null;
		Statement statement = null; 
		try { 
			Class.forName(JDBC_DRIVER); 
			conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);  
			statement = conn.createStatement(); 
			for (String ddl : ddlList) {
				statement.executeUpdate(ddl);
	        }
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		} finally	{
			closeHandles(conn, statement, null);
	    } 

	}

	
	
	

	
	
	public static void generateSchema() throws Exception {
		try {
			List<String> ddlList = new java.util.ArrayList<String>();
			ddlList.add(MongoToRdbmsSqlRepo.repoDb);
			ddlList.add(MongoToRdbmsSqlRepo.repoDb_index1);
			ddlList.add(MongoToRdbmsSqlRepo.repoDb_const1);
			
			MongoToRdbmsSqlRepo mongoToH2SqlRepo = new MongoToRdbmsSqlRepo();
			mongoToH2SqlRepo.createSchema(ddlList);
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	

	public static String repoDb = "CREATE TABLE IF NOT EXISTS "
							+ "repoDb (	id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
									+ "	userName VARCHAR(999),"
									+ "	dbUniqueName VARCHAR(999),"
									+ "	schemaName VARCHAR(999), "
									+ "	tableName VARCHAR(999), "
									+ "	createdAt BIGINT,"
									+ "	closedAt BIGINT,"
									+ "	isTemp VARCHAR(1) )";

	
	
	
	public static String repoDb_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_repoDb_1 ON repoDb(dbUniqueName, schemaName, tableName)";
	public static String repoDb_const1 = "ALTER TABLE repoDb ADD CONSTRAINT IF NOT EXISTS ck_repoDb_1 CHECK (isTemp IN ('Y', 'N') );";
	
	
	
	
	public 
	Map<String, RdbmsRef> 
	getH2Dbs() throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, "
							+ "   userName, "
							+ "	  dbUniqueName, "
							+ "   schemaName, "
							+ "   tableName, "
							+ "   createdAt, "
							+ "   closedAt, "
							+ "   isTemp "
						+ "  FROM repo";
		
		Map<String, RdbmsRef>  ret = new HashMap<> ();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            
            ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	RdbmsRef b = new RdbmsRef(	rs.getLong("id"), 
	            							rs.getString("userName"), 
	            							rs.getString("dbUniqueName"),
	            							rs.getString("schemaName"),
	            							rs.getString("tableName"), 
	            							rs.getLong("createdAt"), 
	            							rs.getLong("closedAt"), 
	            							rs.getString("isTemp")
            							);
            	ret.put(b.getDbUniqueName(), b);
            }
            rs.close();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
		return ret;
	}

	
	
	public 
	boolean 
	updateDb(final RdbmsRef rdbmsRef) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "MERGE INTO repo(userName, "
										+ "  dbUniqueName, "
										+ "  schemaName, "
										+ "  tableName, "
										+ "  createdAt, "
										+ "	 closedAt, "
										+ "  isTemp "
										+ ") KEY(dbUniqueName) "
							+ "VALUES ( ?, ?, ?, ?, ?, ?, ?) ";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
			
			preparedStatement.setString(1, rdbmsRef.getUser());
			preparedStatement.setString(2, rdbmsRef.getDbUniqueName());
			preparedStatement.setString(3, rdbmsRef.getSchema());
			preparedStatement.setString(4, rdbmsRef.getTable());
			
            preparedStatement.setLong(5, rdbmsRef.getCreatedAt());
            preparedStatement.setLong(6, rdbmsRef.getClosedAt());
            preparedStatement.setString(7, rdbmsRef.getIsTemp());

            preparedStatement.executeUpdate();
            return true;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public 
	boolean 
	deleteDb(	final String userName, 
				final String dbUniqueName) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "DELETE repo WHERE userName = ? AND dbUniqueName = ?";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            preparedStatement.setString(1, userName);
            preparedStatement.setString(2, dbUniqueName);
          
            int row = preparedStatement.executeUpdate();
            return row == 1;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	public 
	boolean 
	deleteTable(final String userName, 
				final String dbUniqueName,
				final String schemaName,
				final String table) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "DELETE repo WHERE user = ? AND dbUniqueName = ? AND schemaName = ? AND tableName = ?";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            preparedStatement.setString(1, userName);
            preparedStatement.setString(2, dbUniqueName);
            preparedStatement.setString(3, schemaName);
            preparedStatement.setString(4, table);
          
            int row = preparedStatement.executeUpdate();
            return row == 1;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
}