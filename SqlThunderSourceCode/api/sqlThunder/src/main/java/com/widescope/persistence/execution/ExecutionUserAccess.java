package com.widescope.persistence.execution;

import com.widescope.logging.AppLogger;

import java.sql.*;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class ExecutionUserAccess {

    public
    static final
    String accessRefTable = "CREATE TABLE IF NOT EXISTS " +
                            "accessRefTable (privilegeId BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
                                            + "	objectId BIGINT,"
                                            + "	userId BIGINT,"
                                            + "	privilegeType VARCHAR(MAX) "
                                            + ")";


    public
    static final
    String accessRefTableIndex1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_accessRefTable_1 ON accessRefTable(objectId, userId);";

    public static final
    String accessRefTableConst1 = "ALTER TABLE accessRefTable ADD CONSTRAINT IF NOT EXISTS ck_privilegeTable_1  CHECK (privilegeType IN (" + ExecutionUserAccess.genCommaSeparatedPrivileges() + ") );";


    public
    static
    List<String> privList = Arrays.asList(new String[] { PersistencePrivilege.pTypeNone, PersistencePrivilege.pTypeDownload, PersistencePrivilege.pTypeProcess, PersistencePrivilege.pTypeAdmin});



    public static String genCommaSeparatedPrivileges() {
        privList = Arrays.asList(new String[] { PersistencePrivilege.pTypeNone, PersistencePrivilege.pTypeDownload, PersistencePrivilege.pTypeProcess, PersistencePrivilege.pTypeAdmin});

        return ExecutionUserAccess.privList.stream().collect(Collectors.joining("', '", "'", "'"));
    }


    /*Access Operations*/


    /*add access to user for a certain object*/
    public
    static void
    addArtifactAccess(final long objectId,
                      final long userId,
                      final String privilegeType,
                      final String JDBC_DRIVER,
                      final String DB_URL_DISK,
                      final String USER,
                      final String PASS)	throws Exception {
        Class.forName(JDBC_DRIVER);
        String sqlString = "MERGE INTO accessRefTable (objectId, userId, privilegeType) KEY (objectId, userId, privilegeType) VALUES ( ?, ?, ?) ";

        try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
             PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            preparedStatement.setLong(1, objectId);
            preparedStatement.setLong(2, userId);
            preparedStatement.setString(3, privilegeType);
            preparedStatement.execute();
        } catch (SQLException e)	{
            throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
        } catch (Exception e) {
            throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
        }
    }

    /*List all users with access to a certain object*/
    public static AccessRefPrivilegeList
    getArtifactAccessById(final long objectId,
                          final String JDBC_DRIVER,
                          final String DB_URL_DISK,
                          final String USER,
                          final String PASS) throws Exception {
        Class.forName(JDBC_DRIVER);
        String sqlString = "SELECT privilegeId, objectId, userId, privilegeType FROM accessRefTable WHERE objectId = ?" ;
        AccessRefPrivilegeList ret = new AccessRefPrivilegeList();
        try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
             PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            preparedStatement.setLong(1, objectId);
            try(ResultSet rs = preparedStatement.executeQuery()) {
                while(rs.next()) {
                    ret.addItem( new AccessRefPrivilege(rs.getLong("privilegeId"),
                                                        rs.getLong("objectId"),
                                                        rs.getLong("userId"),
                                                        rs.getString("privilegeType"))
                    );
                }
            }
            return ret;
        } catch (SQLException e)	{
            throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
        } catch (Exception e) {
            throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
        }
    }


    /*List all objects that a certain user has access to*/
    public static AccessRefPrivilegeList
    getArtifactAccessByUserId(final long userId,
                              final String JDBC_DRIVER,
                              final String DB_URL_DISK,
                              final String USER,
                              final String PASS) throws Exception {
        Class.forName(JDBC_DRIVER);
        String sqlString = "SELECT privilegeId, objectId, userId, privilegeType FROM accessRefTable WHERE userId = ?" ;
        AccessRefPrivilegeList ret = new AccessRefPrivilegeList();
        try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
             PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            preparedStatement.setLong(1, userId);
            try(ResultSet rs = preparedStatement.executeQuery()) {
                while(rs.next()) {
                    ret.addItem( new AccessRefPrivilege(rs.getLong("privilegeId"),
                                                        rs.getLong("objectId"),
                                                        rs.getLong("userId"),
                                                        rs.getString("privilegeType"))
                    );
                }
            }
            return ret;
        } catch (SQLException e)	{
            throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
        } catch (Exception e) {
            throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
        }
    }

    /*Get the privilege associated to an object by a user*/
    public static AccessRefPrivilege
    getArtifactAccessByUser(final long objectId,
                            final long userId,
                            final String JDBC_DRIVER,
                            final String DB_URL_DISK,
                            final String USER,
                            final String PASS) throws Exception {
        Class.forName(JDBC_DRIVER);
        String sqlString = "SELECT privilegeId, objectId, userId, privilegeType FROM accessRefTable WHERE objectId = ? AND userId = ?" ;
        try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
             PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            preparedStatement.setLong(1, objectId);
            preparedStatement.setLong(2, userId);

            try(ResultSet rs = preparedStatement.executeQuery()) {
                return new AccessRefPrivilege(  rs.getLong("privilegeId"),
                                                rs.getLong("objectId"),
                                                rs.getLong("userId"),
                                                rs.getString("privilegeType"));
            }
        } catch (SQLException e)	{
            throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
        } catch (Exception e) {
            throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
        }
    }





    /*remove all users assigned to an execution / object*/
    public
    static void
    deleteAccessByArtifactId(final long objectId,
                             final String JDBC_DRIVER,
                             final String DB_URL_DISK,
                             final String USER,
                             final String PASS) throws Exception {
        Class.forName(JDBC_DRIVER);
        String sqlString = "DELETE FROM accessRefTable WHERE objectId = ? ";
        try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
             PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
            preparedStatement.setLong(1, objectId);
            preparedStatement.execute();
        } catch (SQLException e)	{
            throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
        } catch (Exception e) {
            throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
        }
    }

    public
    static void
    deleteArtifactAccess(final long objectId,
                         final long userId,
                         final String JDBC_DRIVER,
                         final String DB_URL_DISK,
                         final String USER,
                         final String PASS) throws Exception {
        Class.forName(JDBC_DRIVER);
        String sqlString = "DELETE FROM accessRefTable WHERE objectId = ? AND userId = ?";
        try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
             PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
            preparedStatement.setLong(1, objectId);
            preparedStatement.setLong(2, userId);
            preparedStatement.execute();
        } catch (SQLException e)	{
            throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
        } catch (Exception e) {
            throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
        }
    }

    public
    static void
    deleteUserAccess(final long userId,
                     final String JDBC_DRIVER,
                     final String DB_URL_DISK,
                     final String USER,
                     final String PASS) throws Exception {
        Class.forName(JDBC_DRIVER);
        String sqlString = "DELETE FROM accessRefTable WHERE userId = ?";
        try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
             PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
            preparedStatement.setLong(1, userId);
            preparedStatement.execute();
        } catch (SQLException e)	{
            throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
        } catch (Exception e) {
            throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
        }
    }




    public
    static void
    deleteArtifactAccess(final long privilegeId,
                         final String JDBC_DRIVER,
                         final String DB_URL_DISK,
                         final String USER,
                         final String PASS) throws Exception {
        Class.forName(JDBC_DRIVER);
        String sqlString = "DELETE FROM accessRefTable WHERE privilegeId = ?";
        try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
             PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
            preparedStatement.setLong(1, privilegeId);
            preparedStatement.execute();
        } catch (SQLException e)	{
            throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
        } catch (Exception e) {
            throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
        }
    }

    /*Count number of users associated to an execution id, or to an executed script */
    public
    static long
    countArtifactAccess(final long objectId,
                        final String JDBC_DRIVER,
                        final String DB_URL_DISK,
                        final String USER,
                        final String PASS) throws Exception {
        Class.forName(JDBC_DRIVER);
        String sqlString = "SELECT COUNT(1) AS cnt FROM accessRefTable WHERE objectId = ? ";
        try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
             PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
            preparedStatement.setLong(1, objectId);
            ResultSet rs = preparedStatement.executeQuery();
            if(rs.next() ) {
                return rs.getLong(1);
            }
            return 0;
        } catch (SQLException e)	{
            throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
        } catch (Exception e) {
            throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
        }
    }

}
