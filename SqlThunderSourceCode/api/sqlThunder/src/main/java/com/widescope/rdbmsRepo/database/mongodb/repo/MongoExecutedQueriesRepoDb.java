/*
 * Copyright 2022-present Infinite Loop Corporation Limited, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.widescope.rdbmsRepo.database.mongodb.repo;



import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException; 
import java.sql.Statement;
import java.util.List;


import com.widescope.logging.AppLogger;
import org.springframework.stereotype.Component;


@Component
public class MongoExecutedQueriesRepoDb {

	// JDBC driver name and database URL 
	private final String JDBC_DRIVER = "org.h2.Driver";   
	private final String DB_URL_DISK = "jdbc:h2:file:./mongoExecutedQueriesRepoDb;MODE=PostgreSQL";  
	
	//  Database credentials 
	private final String USER = "sa"; 
	private final String PASS = "sa"; 
	
	public MongoExecutedQueriesRepoDb()	{}
	
		   
	
	private 
	void 
	closeHandles(	Connection conn, 
					Statement statement, 
					ResultSet rs){
		try	{ if(rs !=null && !rs.isClosed()) { rs.close();	} }	catch(Exception ignored)	{}
		try	{ if(statement !=null && !statement.isClosed()) { statement.close();	} }	catch(Exception ignored)	{}
		try	{ if(conn !=null && !conn.isClosed()) { conn.close();	} }	catch(Exception ignored)	{}
	}
	
	

	private 
	void
	createSchema(final List<String> ddlList) throws Exception	{
		Connection conn = null;
		Statement statement = null; 
		try { 
			Class.forName(JDBC_DRIVER);
			conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			statement = conn.createStatement();
			for (String ddl : ddlList) {
				statement.executeUpdate(ddl);
	        }
			
			statement.close();
			conn.commit();
			conn.close();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		} finally	{
			closeHandles(conn, statement, null);
	    } 
	}

	
		

	
	
	public 
	static 
	void generateSchema() throws Exception {

		try {
			List<String> ddlList = new java.util.ArrayList<String>();
			ddlList.add(MongoExecutedQueriesRepoDb.executedQueriesTable);
			ddlList.add(MongoExecutedQueriesRepoDb.executedQueriesTable_index2);

			ddlList.add(MongoExecutedQueriesRepoDb.executedQueriesUserTable);
			ddlList.add(MongoExecutedQueriesRepoDb.executedQueriesUserTable_index1);

			MongoExecutedQueriesRepoDb mongoExecutedQueriesRepoDb = new MongoExecutedQueriesRepoDb();
			mongoExecutedQueriesRepoDb.createSchema(ddlList);
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}


	}
	

	public static String 
	executedQueriesTable = "CREATE TABLE IF NOT EXISTS "
							+ " mongoExecutedQueriesTable(id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,\r\n"
													+ "	mqlClass VARCHAR(99) ,\r\n"
													+ "	source VARCHAR(1) ,\r\n"  /*A-ADHOC or R-REPO*/
													+ "	usr VARCHAR(999) ,\r\n"
													+ "	mqlContent VARCHAR(4000),\r\n"
													+ "	jsonParam VARCHAR(999) ,\r\n"
													+ "	timestamp BIGINT )";
	
		
	public static String 
	executedQueriesTable_index2 = "CREATE INDEX IF NOT EXISTS  "
			+ " idx_mongoExecutedQueriesTable_2 ON mongoExecutedQueriesTable(usr);";


	public static String 
	executedQueriesUserTable = "CREATE TABLE IF NOT EXISTS "
									+ " executedQueriesUserTable (id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,\r\n"
														+ "	queryId BIGINT ,\r\n"  
														+ "	usr VARCHAR(999) )";	
	public static String 
	executedQueriesUserTable_index1 = "CREATE INDEX IF NOT EXISTS "
			+ " idx_executedQueriesUserTable_1 ON executedQueriesUserTable(queryId, usr);";
	
	

	
	
	
	
	public MongoExecutedQueryList
	getMqlByUser( final String user) throws Exception {
		MongoExecutedQueryList ret = new MongoExecutedQueryList();
		String select = "SELECT id, mqlClass, mqlContent, jsonParam, timestamp FROM mongoExecutedQueriesTable WHERE user = ?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(select))	{
			
			preparedStatement.setString(1, user);
			
			ResultSet rs = preparedStatement.executeQuery();
			while ( rs.next() ) {
				MongoExecutedQuery r 
				= new MongoExecutedQuery(	rs.getLong("id"), 
											rs.getString("mqlClass"), 
											rs.getString("source"), 
											user,
											rs.getString("mqlContent"),
											rs.getString("jsonParam"),
											rs.getLong("timestamp")
				       			          );
				
				
				ret.addMongoExecutedQuery(r);
			}
			rs.close();

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
		
		return ret;
	}
	
	
	
	
	public void 
	addMql(	final String mqlClass,
			final String source, 
			final String user,
			final String mqlContent,
			final String jsonParam,
			final long timestamp) throws Exception {

 		String addSql = "INSERT INTO mongoExecutedQueriesTable(mqlClass, source, user, mqlContent, jsonParam, timestamp) "
						+ " VALUES (?, ?, ?, ?, ?, ?)";
		
		
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(addSql))	{
			
			preparedStatement.setString(1, mqlClass);
			preparedStatement.setString(2, source);
			preparedStatement.setString(3, user);
			preparedStatement.setString(4, mqlContent);
			preparedStatement.setString(5, jsonParam);
			preparedStatement.setLong(6, timestamp);
			
			preparedStatement.execute();

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	
	public void 
	deleteMql(final long mqlId) throws Exception {
		if(mqlId <= 0)
			throw new Exception(AppLogger.logError(Thread.currentThread().getStackTrace()[1], AppLogger.db,"Mql Id is null"));

	
		String deleteDslParam = "DELETE mongoExecutedQueriesTable WHERE mqlId = ?";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(deleteDslParam))	{
			
			preparedStatement.setLong(1, mqlId);
			preparedStatement.execute();

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public void 
	deleteMqlByUser(final String user) throws Exception {
		String deleteDslParam = "DELETE mongoExecutedQueriesTable WHERE user = ?";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(deleteDslParam))	{
			
			preparedStatement.setString(1, user);
			preparedStatement.execute();

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
}

