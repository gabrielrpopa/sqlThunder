/*
 * Copyright 2022-present Infinite Loop Corporation Limited, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.widescope.rdbmsRepo.database.embeddedDb.repo;



import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException; 
import java.sql.Statement;
import java.util.*;


import com.widescope.logging.AppLogger;
import com.widescope.rdbmsRepo.database.DbUtil;
import org.springframework.stereotype.Component;

import com.widescope.rdbmsRepo.database.embeddedDb.repo.clusterRule.ClusterRule;
import com.widescope.rdbmsRepo.database.embeddedDb.repo.sqlRule.SqlRule;



@Component
public class EmbeddedDbRepo {

	// JDBC driver name and database URL 
	private final String JDBC_DRIVER = "org.h2.Driver";   
	private final String DB_URL_DISK = "jdbc:h2:file:./embeddedDbRepo;MODE=PostgreSQL";  
	
	//  Database credentials 
	private final String USER = "sa"; 
	private final String PASS = "sa"; 
	
	public EmbeddedDbRepo()	{}

	private 
	void 
	closeHandles(	Connection conn, 
					Statement statement, 
					ResultSet rs){
		try	{ if(rs !=null && !rs.isClosed()) { rs.close();	} }	catch(Exception ignored)	{}
		try	{ if(statement !=null && !statement.isClosed()) { statement.close();	} }	catch(Exception ignored)	{}
		try	{ if(conn !=null && !conn.isClosed()) { conn.close();	} }	catch(Exception ignored)	{}
	}
	
	

	private 
	void
	createSchema(final List<String> ddlList) throws Exception	{
		Connection conn = null;
		Statement statement = null; 
		try { 
			Class.forName(JDBC_DRIVER);
			conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			statement = conn.createStatement();
			for (String ddl : ddlList) {
				statement.executeUpdate(ddl);
	        }
			
			statement.close();
			conn.commit();
			conn.close();

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		} finally	{
			closeHandles(conn, statement, null);
	    } 
	}

	
		

	
	
	public 
	static 
	void generateSchema() throws Exception {
		try {
			List<String> ddlList = new java.util.ArrayList<String>();
			ddlList.add(EmbeddedDbRepo.embeddedClusterRef);
			ddlList.add(EmbeddedDbRepo.embeddedClusterRef_index1);
			ddlList.add(EmbeddedDbRepo.insertEmbeddedClusterRef);
			ddlList.add(EmbeddedDbRepo.embeddedDbRef);
			ddlList.add(EmbeddedDbRepo.embeddedDbRef_index1);
			ddlList.add(EmbeddedDbRepo.embeddedDbRef_index2);
			ddlList.add(EmbeddedDbRepo.embeddedDbRef_const1);
			ddlList.add(EmbeddedDbRepo.embeddedDbRepoAccessRef);
			ddlList.add(EmbeddedDbRepo.embeddedDbRepoAccessRef_index1);
			ddlList.add(EmbeddedDbRepo.repoDynamicMqlTable_param_fk1);
			ddlList.add(EmbeddedDbRepo.insertEmbeddedDbRepoAccessRef);
			EmbeddedDbRepo embeddedDbRepo = new EmbeddedDbRepo();
			embeddedDbRepo.createSchema(ddlList);
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}

	}
	



	
	
	private
	static final
	String embeddedClusterRef = "CREATE TABLE IF NOT EXISTS embeddedClusterRef (clusterId BIGINT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
																		+ "	clusterName VARCHAR(MAX), "
																		+ "	description VARCHAR(MAX), "
																		+ "	sqlRule VARCHAR(MAX), "
																		+ "	clusterRule VARCHAR(MAX) );";

	private
	static final
	String insertEmbeddedClusterRef = "INSERT INTO embeddedClusterRef VALUES(1, 'testCluster', 'no description', '{}', '{}')";
	
	private
	static final
	String embeddedClusterRef_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_embeddedClusterRef_1 ON embeddedClusterRef(clusterName);";

	

	private
	static final
	String embeddedDbRef = "CREATE TABLE IF NOT EXISTS embeddedDbRepoRef (dbId BIGINT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
																		+ "	fileName VARCHAR(MAX), "
																		+ "	type VARCHAR(MAX), "
																		+ "	userId BIGINT, "
																		+ "	clusterId BIGINT, "
																		+ "	path VARCHAR(MAX), "
																		+ "	info VARCHAR(MAX) );";
		
	private
	static final
    String embeddedDbRef_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_embeddedDbRepoRef_1 ON embeddedDbRepoRef(clusterId, fileName);";
	
	private
	static final
    String embeddedDbRef_index2 = "CREATE INDEX IF NOT EXISTS idx_embeddedDbRepoRef_2 ON embeddedDbRepoRef(clusterId);";

	private
	static final
    String embeddedDbRef_const1 = "ALTER TABLE embeddedDbRepoRef ADD CONSTRAINT IF NOT EXISTS ck_embeddedDbRepoRef_1  CHECK (type IN (" +  DbUtil.genCommaSeparatedEmbeddedDb() + ") );";


	public
	static
	String embeddedDbRepoAccessRef = "CREATE TABLE IF NOT EXISTS " +
							"embeddedDbRepoAccessRef (accessId BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
													+ "	clusterId BIGINT,"
													+ "	userId BIGINT)";


	private
	static final
    String embeddedDbRepoAccessRef_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_embeddedDbRepoAccessRef_1 ON embeddedDbRepoAccessRef(clusterId, userId);";

	private
	static final
    String	repoDynamicMqlTable_param_fk1 = "ALTER TABLE embeddedDbRepoAccessRef ADD CONSTRAINT IF NOT EXISTS embeddedDbRepoAccessRefFk_1 FOREIGN KEY ( clusterId ) REFERENCES embeddedClusterRef( clusterId );";

	private
	static final
    String insertEmbeddedDbRepoAccessRef = "INSERT INTO embeddedDbRepoAccessRef VALUES(1, 1, 1)";
	
	/*********************************************Cluster Management*********************/
	
	
	public
	void
	addEmbeddedCluster(final EmbeddedClusterRecord embeddedClusterRecord)	throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "INSERT INTO embeddedClusterRef ( clusterId, "
															+ "clusterName, "
															+ "description, "
															+ "clusterRule,"
															+ "sqlRule"
															+ ")" +
										"  VALUES(?, ?, ?, ?, ?)";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{

			preparedStatement.setLong(1, embeddedClusterRecord.getClusterId());
			preparedStatement.setString(2, embeddedClusterRecord.getClusterName());
			preparedStatement.setString(3, embeddedClusterRecord.getDescription());
			preparedStatement.setString(4, embeddedClusterRecord.getClusterRule().toString());
			preparedStatement.setString(5, embeddedClusterRecord.getSqlRule().toString());
		
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	 
		
	
	public
	EmbeddedClusterList
	getClusters() throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT clusterId, "
								+ " clusterName, "
								+ " description, "
								+ " clusterRule, "
								+ " sqlRule "
								+ " FROM embeddedClusterRef";

		EmbeddedClusterList embeddedClusterList = new EmbeddedClusterList();

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 Statement statement = conn.createStatement())	{
			ResultSet rs = statement.executeQuery(sqlString);
			while ( rs.next() ) {
				EmbeddedClusterRecord r= new EmbeddedClusterRecord(rs.getInt("clusterId"),
														rs.getString("clusterName"),
														rs.getString("description"),
														ClusterRule.toClusterRule(rs.getString("clusterRule")) ,
														SqlRule.toSqlRule(rs.getString("sqlRule")) 
														);
				embeddedClusterList.addEmbeddedClusterList(r);
			}
			rs.close();
			return embeddedClusterList;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	public
	EmbeddedClusterRecord
	getCluster(final String clusterName) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT clusterId, "
								+ " clusterName, "
								+ " description, "
								+ " clusterRule, "
								+ " sqlRule "
								+ " FROM embeddedClusterRef WHERE clusterName = ?";

		EmbeddedClusterRecord r = new EmbeddedClusterRecord();

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, clusterName);
			ResultSet rs = preparedStatement.executeQuery(sqlString);if(rs.next()) {
				r= new EmbeddedClusterRecord(	rs.getInt("clusterId"),
												rs.getString("clusterName"),
												rs.getString("description"),
												ClusterRule.toClusterRule(rs.getString("clusterRule")) ,
												SqlRule.toSqlRule(rs.getString("sqlRule"))
											);
			}
			rs.close();
			return r;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	public
	EmbeddedClusterRecord
	getCluster(final long clusterId) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT clusterId, "
								+ " clusterName, "
								+ " description, "
								+ " clusterRule, "
								+ " sqlRule "
								+ " FROM embeddedClusterRef WHERE clusterId = ?";

		EmbeddedClusterRecord r = new EmbeddedClusterRecord();

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, clusterId);
			ResultSet rs = preparedStatement.executeQuery();
			if(rs.next()) {
				r= new EmbeddedClusterRecord(	rs.getInt("clusterId"),
												rs.getString("clusterName"),
												rs.getString("description"),
												ClusterRule.toClusterRule(rs.getString("clusterRule")) ,
												SqlRule.toSqlRule(rs.getString("sqlRule"))
											);
			}

			rs.close();
			return r;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	public
	EmbeddedClusterRecord
	deleteCluster(final long clusterId) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT clusterId, "
								+ " clusterName, "
								+ " description, "
								+ " clusterRule, "
								+ " sqlRule "
								+ " FROM embeddedClusterRef WHERE clusterId = ?";

		EmbeddedClusterRecord r = new EmbeddedClusterRecord(-1, null, null, null, null);

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, clusterId);
			ResultSet rs = preparedStatement.executeQuery(sqlString);
			if(rs.next()) {
				r= new EmbeddedClusterRecord(	rs.getInt("clusterId"),
												rs.getString("clusterName"),
												rs.getString("description"),
												ClusterRule.toClusterRule(rs.getString("clusterRule")) ,
												SqlRule.toSqlRule(rs.getString("sqlRule"))
											);
			}

			rs.close();
			return r;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}


	
	

	public
	EmbeddedDbRecordList
	getClusterEmbeddedDb(final long clusterId) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT dbId, "
								+ " fileName, "
								+ " type, "
								+ " userId, "
								+ " clusterId, "
								+ " path, "
								+ " info "
								+ " FROM embeddedDbRepoRef"
								+ " WHERE clusterId = ?";

		EmbeddedDbRecordList ret = new EmbeddedDbRecordList();

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, clusterId);
			ResultSet rs = preparedStatement.executeQuery();
			while ( rs.next() ) {
				EmbeddedDbRecord r = new EmbeddedDbRecord(	rs.getInt("dbId"),
															rs.getString("fileName"),
															rs.getString("type"),
															rs.getInt("userId"),
															rs.getLong("clusterId"),
															rs.getString("path"),
															rs.getString("info")
				
														);
				
				ret.addEmbeddedDbRecord(r);
				
			}
			rs.close();
			return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public
	EmbeddedDbRecord
	getEmbeddedDb(final long clusterId, final long dbId) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT dbId, "
								+ " fileName, "
								+ " type, "
								+ " userId, "
								+ " clusterId, "
								+ " path, "
								+ " info "
								+ " FROM embeddedDbRepoRef"
								+ " WHERE clusterId = ? AND dbId = ?";

		EmbeddedDbRecord r = null;

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, clusterId);
			preparedStatement.setLong(2, dbId);
			ResultSet rs = preparedStatement.executeQuery();
			if(rs.next()) {
				r = new EmbeddedDbRecord(	rs.getInt("dbId"),
											rs.getString("fileName"),
											rs.getString("type"),
											rs.getInt("userId"),
											rs.getLong("clusterId"),
											rs.getString("path"),
											rs.getString("info")
										);
			}

			rs.close();
			return r;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	
	
	public
	EmbeddedDbRecord
	getEmbeddedDb(final long clusterId, final String dbName) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT dbId, "
								+ " fileName, "
								+ " type, "
								+ " userId, "
								+ " clusterId, "
								+ " path, "
								+ " info "
								+ " FROM embeddedDbRepoRef"
								+ " WHERE clusterId = ? AND fileName = ?";

		EmbeddedDbRecord r = null;

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, clusterId);
			preparedStatement.setString(2, dbName);
			ResultSet rs = preparedStatement.executeQuery();
			if(rs.next()) {
				r = new EmbeddedDbRecord(	rs.getInt("dbId"),
											rs.getString("fileName"),
											rs.getString("type"),
											rs.getInt("userId"),
											rs.getLong("clusterId"),
											rs.getString("path"),
											rs.getString("info") 	);
			}

			rs.close();
			return r;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	public
	void
	addEmbeddedDb(final EmbeddedDbRecord embeddedDbRecord)	throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "INSERT INTO embeddedDbRepoRef ( fileName, "
															+ "type, "
															+ "userId, "
															+ "clusterId, "
															+ "path, "
															+ "info)" +
										"  VALUES(?, ?, ?, ?, ?, ?)";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, embeddedDbRecord.getFileName());
			preparedStatement.setString(2, embeddedDbRecord.getType());
			preparedStatement.setLong(3, embeddedDbRecord.getUserId());
			preparedStatement.setLong(4, embeddedDbRecord.getClusterId());
			preparedStatement.setString(5, embeddedDbRecord.getPath());
			preparedStatement.setString(6, embeddedDbRecord.getInfo());

			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public
	void
	deleteEmbeddedDb(final long id) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "DELETE FROM embeddedDbRepoRef WHERE dbId=?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
			preparedStatement.setLong(1, id);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	
	
	
	/*********************************************Cluster Access Management *********************/
	

	public
	EmbeddedClusterPermList
	getClusterPermission(final long clusterId) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT accessId, clusterId, userId FROM embeddedDbRepoAccessRef WHERE clusterId = ?";

		EmbeddedClusterPermList ret = new EmbeddedClusterPermList();

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, clusterId);
			ResultSet rs = preparedStatement.executeQuery();
			while ( rs.next() ) {
				EmbeddedClusterPermRecord r = new EmbeddedClusterPermRecord(rs.getLong("accessId"),
																			rs.getLong("clusterId"),
																			rs.getLong("userId")
																			);
				
				ret.addEmbeddedClusterPermRecordList(r);
				
			}
			rs.close();
			return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	public
	void
	addEmbeddedDbAccess(final long clusterId,
						final long userId)	throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "MERGE INTO embeddedDbRepoAccessRef KEY (clusterId, userId) "
						+ "	VALUES ( clusterId, userId) VALUES(?, ?)";

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, clusterId);
			preparedStatement.setLong(2, userId);


			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public
	void
	deleteEmbeddedDbAccess(final long clusterId, final long userId) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "DELETE FROM embeddedDbRepoAccessRef WHERE clusterId = ? AND userId = ?";
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
			preparedStatement.setLong(1, clusterId);
			preparedStatement.setLong(2, userId);
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	

}

