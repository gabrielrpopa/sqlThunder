/*
 * Copyright 2022-present Infinite Loop Corporation Limited, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.widescope.rdbmsRepo.database.embeddedDb.embedded;


import com.widescope.logging.AppLogger;
import org.springframework.stereotype.Component;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;



@Component
public class EmbeddedRepoGenericSql {

	// JDBC driver name and database URL
	private final String JDBC_DRIVER = "org.h2.Driver";
	private final String DB_URL_DISK = "jdbc:h2:file:./embeddedRepoGenericSql;MODE=PostgreSQL";

	//  Database credentials
	private final String USER = "sa";
	private final String PASS = "sa";

	public EmbeddedRepoGenericSql()	{}

	private 
	void 
	closeHandles(	Connection conn, 
					Statement statement, 
					ResultSet rs){
		try	{ if(rs !=null && !rs.isClosed()) { rs.close();	} }	catch(Exception ignored)	{}
		try	{ if(statement !=null && !statement.isClosed()) { statement.close();	} }	catch(Exception ignored)	{}
		try	{ if(conn !=null && !conn.isClosed()) { conn.close();	} }	catch(Exception ignored)	{}
	}
	
	

	private 
	void
	createSchema(final List<String> ddlList) throws Exception	{
		Connection conn = null;
		Statement statement = null; 
		try { 
			Class.forName(JDBC_DRIVER);
			conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			statement = conn.createStatement();
			for (String ddl : ddlList) {
				statement.executeUpdate(ddl);
	        }
			
			statement.close();
			conn.commit();
			conn.close();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		} finally	{
			closeHandles(conn, statement, null);
	    } 
	}

	
		

	
	
	public 
	static 
	void generateSchema() throws Exception {
		try {
			List<String> ddlList = new ArrayList<String>();

			ddlList.add(EmbeddedRepoGenericSql.h2);
			ddlList.add(EmbeddedRepoGenericSql.h2_index1);
			ddlList.add(EmbeddedRepoGenericSql.h2_insert1);
			ddlList.add(EmbeddedRepoGenericSql.h2_insert2);
			ddlList.add(EmbeddedRepoGenericSql.h2_insert3);
			ddlList.add(EmbeddedRepoGenericSql.h2_insert4);
			ddlList.add(EmbeddedRepoGenericSql.h2_insert5);

			ddlList.add(EmbeddedRepoGenericSql.hsqldb);
			ddlList.add(EmbeddedRepoGenericSql.hsqldb_index1);

			ddlList.add(EmbeddedRepoGenericSql.derby);
			ddlList.add(EmbeddedRepoGenericSql.derby_index1);

			ddlList.add(EmbeddedRepoGenericSql.sqlite);
			ddlList.add(EmbeddedRepoGenericSql.sqlite_index1);

			ddlList.add(EmbeddedRepoGenericSql.berkeley);
			ddlList.add(EmbeddedRepoGenericSql.berkeley_index1);

			EmbeddedRepoGenericSql embeddedDbRepo = new EmbeddedRepoGenericSql();
			embeddedDbRepo.createSchema(ddlList);
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}


	}




	private
	static
	String h2 = "CREATE TABLE IF NOT EXISTS h2 (id BIGINT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
											+ "	sql VARCHAR(MAX), "
											+ "	category VARCHAR(MAX), "
											+ "	description VARCHAR(MAX)) ";
		
	private
	static
	String h2_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_h2_1 ON h2(category);";

	public static String
			h2_insert1 = "INSERT INTO h2(id, sql, category, description) "
						+ "VALUES(1, 'SELECT * FROM INFORMATION_SCHEMA.TABLES', 'getalltables', 'Get all tables present in the database');";
	public static String
			h2_insert2 = "INSERT INTO h2(id, sql, category, description) "
			+ "VALUES(2, 'SELECT * FROM INFORMATION_SCHEMA.TABLES', 'getallindexes', 'Get all indexes present in the database');";

	public static String
			h2_insert3 = "INSERT INTO h2(id, sql, category, description) "
			+ "VALUES(3, 'SELECT * FROM INFORMATION_SCHEMA.TABLES', 'gettablecolumns', 'Get all columns of a table present in the database');";
	public static String
			h2_insert4 = "INSERT INTO h2(id, sql, category, description) "
			+ "VALUES(4, 'SELECT * FROM INFORMATION_SCHEMA.TABLES', 'getcount', 'Get number of rows a table present in the database has');";
	public static String
			h2_insert5 = "INSERT INTO h2(id, sql, category, description) "
			+ "VALUES(5, 'SELECT * FROM INFORMATION_SCHEMA.TABLES', 'getcolumntypes', 'Get the table dictionary');";




	private
	static final
    String hsqldb = "CREATE TABLE IF NOT EXISTS hsqldb (id BIGINT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
			+ "	sql VARCHAR(MAX), "
			+ "	category VARCHAR(MAX) , "
			+ "	description VARCHAR(MAX)) ";

	private
	static final
    String hsqldb_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_hsqldb_1 ON hsqldb(category);";


	private
	static final
    String derby = "CREATE TABLE IF NOT EXISTS derby (id BIGINT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
			+ "	sql VARCHAR(MAX), "
			+ "	category VARCHAR(MAX) , "
			+ "	description VARCHAR(MAX)) ";

	private
	static final
    String derby_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_derby_1 ON derby(category);";


	private
	static final
    String sqlite = "CREATE TABLE IF NOT EXISTS sqlite (id BIGINT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
			+ "	sql VARCHAR(MAX), "
			+ "	category VARCHAR(MAX) , "
			+ "	description VARCHAR(MAX)) ";

	private
	static final
    String sqlite_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_sqlite_1 ON sqlite(category);";


	private
	static final
    String berkeley = "CREATE TABLE IF NOT EXISTS berkeley (id BIGINT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
			+ "	sql VARCHAR(MAX), "
			+ "	category VARCHAR(MAX) , "
			+ "	description VARCHAR(MAX)) ";

	private
	static final
    String berkeley_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_berkeley_1 ON berkeley(category);";

	public String
	getQuery(final String db,
			 final String category ) throws Exception {

		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT sql FROM ? WHERE category = ?";


		String  sql = null;
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            preparedStatement.setString(0, db);
			preparedStatement.setString(1, category);
			ResultSet rs = preparedStatement.executeQuery(sqlString);
            if ( rs.next() ) {
				sql = rs.getString("sql");
            }
			this.closeHandles(conn, preparedStatement, rs);
            return sql;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

}

