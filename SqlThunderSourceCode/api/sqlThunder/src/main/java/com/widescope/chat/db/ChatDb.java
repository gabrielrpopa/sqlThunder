/*
 * Copyright 2024-present Infinite Loop Corporation Limited, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.widescope.chat.db;


import com.widescope.chat.db.persistence.UserPairValue;
import com.widescope.chat.users.ChatUser;
import com.widescope.logging.AppLogger;
import org.springframework.stereotype.Component;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

@Component
public class ChatDb {

	// JDBC driver name and database URL
	private final String JDBC_DRIVER = "org.h2.Driver";
	private final String DB_URL_DISK = "jdbc:h2:file:./chatDb;MODE=PostgreSQL";

	//  Database credentials
	private final String USER = "sa";
	private final String PASS = "sa";

	public ChatDb()	{}


	public static String
			externalUserTable = "CREATE TABLE IF NOT EXISTS externalUserTable (id INT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, \r\n"
																			+ "	userId BIGINT, "  /*long in H2*/
																			+ "	firstName VARCHAR(MAX),"
																			+ "	lastName VARCHAR(MAX) ,"
																			+ "	email VARCHAR(MAX) ,"
																			+ "	department BIGINT DEFAULT 1,"
																			+ "	title BIGINT DEFAULT 1,"
																			+ "	manager BIGINT DEFAULT 1,"
																			+ "	characteristic VARCHAR(MAX) DEFAULT '',"
																			+ "	description VARCHAR(MAX) DEFAULT '',"
																			+ "	nodeId BIGINT "
																			+ ")";

	public static String externalUserTable_index_1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_externalUserTable_1 ON externalUserTable(userId, nodeId);";



	public static String
			userTable = "CREATE TABLE IF NOT EXISTS userTable (id INT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, "
															+ "	fromId BIGINT, "
															+ "	fromUser VARCHAR(MAX), "
															+ "	isFromExt VARCHAR(1) DEFAULT 'N', "
															+ "	toId BIGINT, "
															+ "	toUser VARCHAR(MAX), "
															+ "	isToExt VARCHAR(1) DEFAULT 'N' "
															+ ")";
	public static String userTable_index_1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_userTable_1 ON userTable(fromUser, toUser);";

	public static String userTable_const1 = "ALTER TABLE userTable ADD CONSTRAINT IF NOT EXISTS ck_userTable_1  CHECK (isFromExt IN ('Y', 'N') );";
	public static String userTable_const2 = "ALTER TABLE userTable ADD CONSTRAINT IF NOT EXISTS ck_userTable_1  CHECK (isToExt IN ('Y', 'N') );";

	public static String
			chatTable = "CREATE TABLE IF NOT EXISTS chatTable (id INT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, "
															+ "	fromUser VARCHAR(MAX), "
															+ "	toUser VARCHAR(MAX), "
															+ "	timestamp BIGINT, "
															+ "	requestId VARCHAR(MAX), "  /*unique generated id */
															+ "	isDelivered VARCHAR(1), "  /*Y/N */
	 														+ " isWithAttachment VARCHAR(1), "  /*Y/N */
			                                                + "	mongoUniqueName VARCHAR(MAX), "
															+ "	mongoDatabase VARCHAR(MAX), "
															+ "	mongoCollection VARCHAR(MAX), "
															+ "	size BIGINT "  /*Y/N */
															+ ")";
	public static String chatTable_index_1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_chatTable_1 ON chatTable(fromUser, toUser, requestId);";




	public static String chatGroupTable = "CREATE TABLE IF NOT EXISTS chatGroupTable (id INT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, "
																					+ "	groupName BIGINT "
																					+ ")";

	public static String chatGroupUsersTable = "CREATE TABLE IF NOT EXISTS chatGroupUsersTable (id INT  GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, "
																							+ "	groupId BIGINT, "
																							+ "	userId BIGINT "
																							+ ")";

	public static String chatGroupUsersTable_index_1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_chatGroupUsersTable_1 ON chatGroupUsersTable(groupId, userId);";


	private 
	void 
	closeHandles(	Connection conn, 
					Statement statement,
					ResultSet rs){
		try	{ if(rs !=null && !rs.isClosed()) { rs.close();	} }	catch(Exception ignored)	{}
		try	{ if(statement !=null && !statement.isClosed()) { statement.close();	} }	catch(Exception ignored)	{}
		try	{ if(conn !=null && !conn.isClosed()) { conn.close();	} }	catch(Exception ignored)	{}
	}
	

	public static String insertUserSqlString = " MERGE INTO userTable (fromId, fromUser, isFromExt, toId, toUser, isToExt) key(fromUser, toUser) VALUES(?, ?, ?, ?, ?, ?)";
	public static String deleteUserSqlString = "DELETE userTable WHERE fromUser = ? AND toUser = ?";
	public static  String getUsersToSqlString = "SELECT fromId, fromUser, isFromExt, toId, toUser, isToExt FROM userTable WHERE fromUser = ? ";

	public static  String getUserToChatToSqlString = "SELECT TOP 1 fromId, fromUser, isFromExt FROM userTable WHERE fromUser = ? ";

	public static String getMessageSqlString = "SELECT id, fromUser, toUser, timestamp, requestId, isDelivered, isWithAttachment, mongoUniqueName, mongoDatabase, mongoCollection, size  FROM chatTable WHERE fromUser = ? AND toUser = ? AND requestId = ?";
	public static String getMessagesSqlString = "SELECT id,	fromUser, toUser, timestamp, requestId, isDelivered, isWithAttachment, mongoUniqueName, mongoDatabase, mongoCollection, size FROM chatTable WHERE fromUser = ? AND toUser = ? AND isDelivered = ? AND timestamp > ? ORDER BY timestamp DESC";
	public static String getUsersWithOutstandingMessages = "SELECT fromUser FROM chatTable WHERE toUser = ? AND isDelivered = ? group by fromUser";
	public static String getMessageHistSqlString = "SELECT id,	fromUser, toUser, timestamp, requestId, isDelivered, isWithAttachment, mongoUniqueName, mongoDatabase, mongoCollection, size FROM chatTable WHERE fromUser = ? AND toUser = ? AND timestamp > ? AND timestamp < ? ORDER BY timestamp DESC";
	public static String isUnreadMessagesSqlString = "SELECT COUNT(1) AS count FROM chatTable WHERE toUser = ? AND isDelivered = ?";
	public static String setReadMessage = "UPDATE chatTable SET isDelivered = ? WHERE fromUser = ? AND toUser = ? AND requestId = ?";
	public static String deleteMessage = "DELETE FROM chatTable WHERE fromUser = ? AND toUser = ? AND requestId = ?";
	public static String getMessagesDeliveredSqlString = "SELECT id, fromUser, toUser, timestamp, requestId, isDelivered, isWithAttachment, mongoUniqueName, mongoDatabase, mongoCollection, size FROM chatTable WHERE isDelivered = ? AND toUser = ? ORDER BY timestamp DESC";

	public static String mergeChatMessageSqlString = "MERGE INTO chatTable (fromUser, toUser, timestamp, requestId, isDelivered, isWithAttachment, mongoUniqueName, mongoDatabase, mongoCollection, size)  KEY (fromUser, toUser, requestId) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	public static  String deleteChatSqlString = "DELETE FROM chatTable WHERE fromUser = ? AND toUser = ? AND timestamp = ?";

	private 
	void
	createSchema(final List<String> ddlList) throws Exception	{

		Connection conn = null;
		Statement statement = null; 
		try { 
			// STEP 1: Register JDBC driver 
			Class.forName(JDBC_DRIVER); 
			//STEP 2: Open a connection 
			conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);  
			//STEP 3: Execute a query 
			statement = conn.createStatement(); 
			for (String ddl : ddlList) {
				statement.executeUpdate (ddl);
	        }
			
			statement.close();
			conn.commit();
			conn.close();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		} finally	{
			closeHandles(conn, statement, null);
	    } 
	}


	
	public 
	static 
	void generateSchema() throws Exception {
		List<String> ddlList = new java.util.ArrayList<>();
		ddlList.add(ChatDb.externalUserTable);
		ddlList.add(ChatDb.externalUserTable_index_1);


		ddlList.add(ChatDb.userTable);
		ddlList.add(ChatDb.chatTable);
		ddlList.add(ChatDb.chatTable_index_1);
		ddlList.add(ChatDb.userTable_const1);
		ddlList.add(ChatDb.userTable_const2);
		ddlList.add(userTable_index_1);


		ddlList.add(ChatDb.chatTable_index_1);
		ddlList.add(ChatDb.chatGroupTable);
		ddlList.add(ChatDb.chatGroupUsersTable);
		ddlList.add(ChatDb.chatGroupUsersTable_index_1);


		ChatDb chatDb = new ChatDb();
		chatDb.createSchema(ddlList);
	}




	public boolean addUser(	final long fromId,
							final String fromUser,
							final String  isFromExt,
 						    final long toId,
							final String toUser,
							final String isToExt) throws Exception {

		Class.forName(JDBC_DRIVER);
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			PreparedStatement preparedStatement = conn.prepareStatement(insertUserSqlString))	{
			preparedStatement.setLong(1, fromId);
			preparedStatement.setString(2, fromUser);
			preparedStatement.setString(3, isFromExt);
			preparedStatement.setLong(4, toId);
			preparedStatement.setString(5, toUser);
			preparedStatement.setString(6, isToExt);
			preparedStatement.executeUpdate();
			return true;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public boolean deleteUser(final long fromId,
							  final long toId) throws Exception	{

		Class.forName(JDBC_DRIVER);
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(deleteUserSqlString)) {

			preparedStatement.setLong(1, fromId);
			preparedStatement.setLong(1, toId);

			int row = preparedStatement.executeUpdate();
            return row == 1;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}





	public List<ChatUser> getUsersTo(final String fromUser) throws Exception {
		Class.forName(JDBC_DRIVER);
		List<ChatUser> ret = new ArrayList<>();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			PreparedStatement preparedStatement = conn.prepareStatement(getUsersToSqlString))	{
			preparedStatement.setString(1, fromUser);
			ResultSet rs = preparedStatement.executeQuery();
			while ( rs.next() ) {
				ChatUser u = new ChatUser( 	rs.getLong("fromId"),
											rs.getString("fromUser"),
											rs.getString("isFromExt"),
											rs.getLong("toId"),
											rs.getString("toUser"),
											rs.getString("isToExt")	);
				ret.add(u);
			}
			rs.close();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}

		return ret;
	}

	
	
	
	public
	ChatRecord
	getMessage(final String fromUser, final String toUser, String requestId ) throws Exception {
		Class.forName(JDBC_DRIVER);
		ChatRecord ret = null;
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
			PreparedStatement preparedStatement = conn.prepareStatement(getMessageSqlString))	{
			preparedStatement.setString(1, fromUser);
			preparedStatement.setString(2, toUser);
			preparedStatement.setString(3, requestId);
			ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	ret = new ChatRecord(	rs.getInt("id"),
            							rs.getString("fromUser"),
            							rs.getString("toUser"),
									    rs.getLong("timestamp"),
										rs.getString("requestId"),
										rs.getString("isDelivered"),
										rs.getString("isWithAttachment"),
										rs.getString("mongoUniqueName"),
										rs.getString("mongoDatabase"),
										rs.getString("mongoCollection"),
										rs.getLong("size")
			            			 );
            	
            }
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public ChatRecord setReadMessage(final String fromUser, final String toUser, String requestId) throws Exception	{
		Class.forName(JDBC_DRIVER);
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(setReadMessage)) {

			preparedStatement.setString(1, "Y");
			preparedStatement.setString(2, fromUser);
			preparedStatement.setString(3, toUser);
			preparedStatement.setString(4, requestId);

			int row = preparedStatement.executeUpdate();
			if(row == 1) {
				return new ChatRecord(fromUser, toUser, requestId, "Y");
			} else {
				return new ChatRecord(fromUser, toUser, requestId, "N");
			}
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public void deleteMessage(final String fromUser, final String toUser, String requestId) throws Exception	{
		Class.forName(JDBC_DRIVER);
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(deleteMessage)) {

			preparedStatement.setString(1, fromUser);
			preparedStatement.setString(2, toUser);
			preparedStatement.setString(3, requestId);

			preparedStatement.executeUpdate();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}

	public
	List<ChatRecord>
	getMessages(final String fromUser, final String toUser, final String isDelivered, final long fromDateTime ) throws Exception {
		Class.forName(JDBC_DRIVER);
		List<ChatRecord> ret = new ArrayList<ChatRecord>();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(getMessagesSqlString))	{
			preparedStatement.setString(1, fromUser);
			preparedStatement.setString(2, toUser);
			preparedStatement.setString(3, isDelivered);
			preparedStatement.setLong(4, fromDateTime);

			ResultSet rs = preparedStatement.executeQuery();
			while ( rs.next() ) {
				ChatRecord chat = new ChatRecord(rs.getInt("id"),
												rs.getString("fromUser"),
												rs.getString("toUser"),
												rs.getLong("timestamp"),
												rs.getString("requestId"),
												rs.getString("isDelivered"),
												rs.getString("isWithAttachment"),
												rs.getString("mongoUniqueName"),
												rs.getString("mongoDatabase"),
												rs.getString("mongoCollection"),
												rs.getLong("size")
										);
				ret.add(chat);
			}
			rs.close();
			return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}


	public
	List<UserPairValue>
	getUsersWithOutstandingMessages(final String toUser, final String isDelivered ) throws Exception {
		Class.forName(JDBC_DRIVER);
		List<UserPairValue> ret = new ArrayList<>();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(getUsersWithOutstandingMessages))	{

			preparedStatement.setString(1, toUser);
			preparedStatement.setString(2, isDelivered);

			ResultSet rs = preparedStatement.executeQuery();
			while ( rs.next() ) {
				String fromUser = rs.getString("fromUser");
				ret.add(new UserPairValue( -1, fromUser) );
			}
			rs.close();
			return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}


	public
	List<ChatRecord>
	getMessageHist(final String fromUser, final String toUser, final long fromTime, final long toTime ) throws Exception {
		Class.forName(JDBC_DRIVER);
		List<ChatRecord> ret = new ArrayList<ChatRecord>();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			 PreparedStatement preparedStatement = conn.prepareStatement(getMessageHistSqlString))	{
			preparedStatement.setString(1, fromUser);
			preparedStatement.setString(2, toUser);
			preparedStatement.setLong(3, fromTime);
			preparedStatement.setLong(4, toTime);

			ResultSet rs = preparedStatement.executeQuery();
			while ( rs.next() ) {
				ChatRecord chat = new ChatRecord(	rs.getInt("id"),
													rs.getString("fromUser"),
													rs.getString("toUser"),
													rs.getLong("timestamp"),
													rs.getString("requestId"),
													rs.getString("isDelivered"),
													rs.getString("isWithAttachment"),
													rs.getString("mongoUniqueName"),
													rs.getString("mongoDatabase"),
													rs.getString("mongoCollection"),
													rs.getLong("size")
												);
				ret.add(chat);
			}
			rs.close();
			return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}


	public
	long
	isUnreadMessages(final String toUser, final String isDelivered ) throws Exception {
		Class.forName(JDBC_DRIVER);
		long ret = 0;
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);
			PreparedStatement preparedStatement = conn.prepareStatement(isUnreadMessagesSqlString))	{
			preparedStatement.setString(1, toUser);
			preparedStatement.setString(2, isDelivered);
			ResultSet rs = preparedStatement.executeQuery();
			rs.next();
			ret = rs.getInt("count");
			rs.close();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
		return ret;
	}

	//, mongoUniqueName, mongoDatabase, mongoCollection, size
	public 
	void 
	mergeChat(final ChatRecord chatRecord)	throws Exception {
		Class.forName(JDBC_DRIVER);

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(mergeChatMessageSqlString))	{
			
			preparedStatement.setString(1, chatRecord.getFromUser());
			preparedStatement.setString(2, chatRecord.getToUser());
			preparedStatement.setLong(3, chatRecord.getTimeStamp());
			preparedStatement.setString(4, chatRecord.getRequestId());
			preparedStatement.setString(5, chatRecord.getIsDelivered());
			preparedStatement.setString(6, chatRecord.getIsWithAttachment());
			preparedStatement.setString(7, chatRecord.getMongoUniqueName());
			preparedStatement.setString(8, chatRecord.getMongoDatabase());
			preparedStatement.setString(9, chatRecord.getMongoCollection());
			preparedStatement.setLong(10, chatRecord.getSize());
			preparedStatement.execute();

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	


	
	public 
	void 
	deleteChat(final ChatRecord chatRecord) throws Exception {
		Class.forName(JDBC_DRIVER);

		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(deleteChatSqlString)) {
			preparedStatement.setString(1, chatRecord.getFromUser());
			preparedStatement.setString(2, chatRecord.getToUser());
			preparedStatement.setLong(3, chatRecord.getTimeStamp());
			preparedStatement.execute();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	

	
}



