/*
 * Copyright 2024-present Infinite Loop Corporation Limited, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.widescope.logging.repo;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException; 
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.widescope.logging.AppLogger;
import org.springframework.stereotype.Component;




/**
 * Database with reference to all log databases and their folders. 
 * Setup as in-memory, due to large number of accumulated records over time 
 * that might have to be accessed in timely manner  
 * @author popa_
 *
 */
@Component
public class H2LogRepoDb {

	// JDBC driver name and database URL 
	private final String JDBC_DRIVER = "org.h2.Driver";   
	private final String DB_URL_DISK_REF = "jdbc:h2:file:./logRepo;MODE=PostgreSQL;";  

	//  Database credentials 
	private final String USER = "sa"; 
	private final String PASS = "sa"; 
	
	public H2LogRepoDb() {
		
	}
	
	private static void closeHandles(Connection conn, Statement statement, ResultSet rs) {
		try	{ if(rs !=null && !rs.isClosed()) { rs.close();	} }	catch(Exception ignored)	{}
		try	{ if(statement !=null && !statement.isClosed()) { statement.close();	} }	catch(Exception ignored)	{}
		try	{ if(conn !=null && !conn.isClosed()) { conn.close();	} }	catch(Exception ignored)	{}
	}
	
	private
	static final
	String 
	applicationTable = "CREATE TABLE IF NOT EXISTS applicationTable ("
						+ "	applicationId BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,\r\n"
						+ "	application VARCHAR(999),	"
						+ "	partitionType VARCHAR(999),	"
						+ "	repositoryType VARCHAR(999),  "
						+ "	repositoryId BIGINT "
						+ ")";

	private
	static final
	String
	applicationTable_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_applicationTable_1 ON applicationTable(application);";
	
	private
	static final
	String
	applicationTable_const1 = "ALTER TABLE applicationTable ADD CONSTRAINT IF NOT EXISTS ck_applicationTable_1  CHECK (partitionType IN ('HOUR', 'DAY', 'MONTH') );";

	
    
	private
	static final
	String 
	applicationTable_const2 = "ALTER TABLE applicationTable ADD CONSTRAINT IF NOT EXISTS ck_applicationTable_1  CHECK (repositoryType IN ('MONGODB','RDBMS','ELASTICSEARCH','H2') );";

	public 
	static final
	String 
	applicationTable_insert1 = "INSERT INTO applicationTable (applicationId, application, partitionType, repositoryType, repositoryId) VALUES(1, 'SQLTHUNDER', 'HOUR', 'H2', -1)";
	
	
	private
	static final
	String 
	partitionTable = "CREATE TABLE IF NOT EXISTS partitionTable (\r\n"
														+ "	partitionId BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,\r\n"
														+ "	applicationId BIGINT,	"
														+ "	file VARCHAR(999),	"
														+ "	fromTime BIGINT,	"
														+ "	toTime BIGINT	"
														+ ")";
	
	private
	static final
	String 
	partitionTable_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_partitionTable_1 ON partitionTable(applicationId, partitionId);";

	
	private
	static final
	String 
	repositoryTypeTable = "CREATE TABLE IF NOT EXISTS repositoryTypeTable (\r\n"
														+ "	repositoryTypeId BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,\r\n"
														+ "	applicationId BIGINT, "
														+ "	repositoryType VARCHAR(999),  "
														+ "	repositoryId BIGINT "
														+ ")";
	
	

	public static String getApplicationFolder(String application) {
		String path = "./storage/log/@application@";
		path = path.replace("@application@", application);
		return path;
	}

	public 
	static 
	void generateSchema() throws Exception {
		try {
			List<String> ddlList = new java.util.ArrayList<String>();
			ddlList.add(applicationTable);
			ddlList.add(applicationTable_index1);
			ddlList.add(applicationTable_const1);
			ddlList.add(applicationTable_const2);
			ddlList.add(applicationTable_insert1);

			ddlList.add(partitionTable);
			ddlList.add(partitionTable_index1);

			ddlList.add(repositoryTypeTable);


			H2LogRepoDb h2LogRefDb = new H2LogRepoDb();
			h2LogRefDb.createSchema(ddlList);
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}


	}
	
	public void createSchema(final List<String> ddlList) throws Exception {
		Connection conn = null;
		Statement statement = null; 
		try { 
			// STEP 1: Register JDBC driver 
			Class.forName(JDBC_DRIVER); 
	             
			//STEP 2: Open a connection 
			conn = DriverManager.getConnection(this.DB_URL_DISK_REF, USER, PASS);  
	         
			//STEP 3: Execute a query 
			statement = conn.createStatement(); 
			
			for (String ddl : ddlList) {
				statement.executeUpdate(ddl);
	        }
			
			statement.close();
			conn.commit();
			conn.close();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		} finally	{
			closeHandles(conn, statement, null);
	    } 
	}
	
	
	/******************* ApplicationTable */

	public int 
	addApplication(	final String application, 
					final String partitionType, 
					final String repositoryType,
					final long repositoryId	) throws Exception	{
		int ret;
		Class.forName(JDBC_DRIVER); 
		String sqlString = "INSERT INTO applicationTable (application, partitionType, repositoryType, repositoryId) VALUES(?, ?, ?, ?)";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK_REF, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, application);
			preparedStatement.setString(2, partitionType);
			preparedStatement.setString(3, repositoryType);
			preparedStatement.setLong(4, repositoryId);
            ret = preparedStatement.executeUpdate();
            preparedStatement.close();
            
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	public int 
	deleteApplication( final long applicationId) throws Exception {
		int ret;
		Class.forName(JDBC_DRIVER); 
		String sqlString = "DELETE applicationTable WHERE applicationId = ?";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK_REF, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, applicationId);
            ret = preparedStatement.executeUpdate();
            preparedStatement.close();
            
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public
	ApplicationRecord 
	getApplication(final long applicationId) throws Exception {
		ApplicationRecord ret = null;
		Class.forName(JDBC_DRIVER); 
		String sqlString = "SELECT applicationId, "
								+ "application, "
								+ "partitionType, "
								+ "repositoryType, "
								+ "repositoryId "
								+ "FROM applicationTable "
								+ "WHERE applicationId =  ? ";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK_REF, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, applicationId);
			ResultSet rs = preparedStatement.executeQuery();
            
            if ( rs.next() ) {
            	ret = new ApplicationRecord(rs.getLong("applicationId"),
            								rs.getString("application"),
            								rs.getString("partitionType"),
            								rs.getString("repositoryType"),
            								rs.getLong("repositoryId"),
            								new ArrayList<ApplicationPartitionRecord>()
			            				);

            }
            
            
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	public ApplicationRecord 
	getApplication(final String application) throws Exception {
		ApplicationRecord ret = null;
		Class.forName(JDBC_DRIVER); 
		String sqlString = "SELECT applicationId, "
								+ "application, "
								+ "partitionType, "
								+ "repositoryType, "
								+ "repositoryId "
								+ "FROM applicationTable "
								+ "WHERE application =  ? ";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK_REF, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, application );
			ResultSet rs = preparedStatement.executeQuery();
            
            if ( rs.next() ) {
            	ret = new ApplicationRecord(rs.getLong("applicationId"),
											rs.getString("application"),
											rs.getString("partitionType"),
											rs.getString("repositoryType"),
											rs.getLong("repositoryId"),
											new ArrayList<>()
								    	);

            }
            
            
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public List<ApplicationRecord> 
	getApplicationByName(final String application) throws Exception {
		List<ApplicationRecord> ret = new ArrayList<>();
		Class.forName(JDBC_DRIVER); 
		String sqlString = "SELECT applicationId, "
								+ "application, "
								+ "partitionType, "
								+ "repositoryType, "
								+ "repositoryId "
								+ "FROM applicationTable "
								+ "WHERE application like  ? ";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK_REF, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setString(1, "%" + application + "%");
			ResultSet rs = preparedStatement.executeQuery();
            
            while ( rs.next() ) {
            	ApplicationRecord b = new ApplicationRecord(rs.getLong("applicationId"),
															rs.getString("application"),
															rs.getString("partitionType"),
															rs.getString("repositoryType"),
															rs.getLong("repositoryId"),
															new ArrayList<ApplicationPartitionRecord>()
								    						);
            	ret.add(b);
            }
            
            
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public List<ApplicationRecord> 
	getAllApplications() throws Exception {
		List<ApplicationRecord> ret = new ArrayList<>();
		Class.forName(JDBC_DRIVER); 
		String sqlString = "SELECT applicationId, "
								+ "application, "
								+ "partitionType, "
								+ "repositoryType, "
								+ "repositoryId "
								+ "FROM applicationTable ";
								
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK_REF, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			
			ResultSet rs = preparedStatement.executeQuery();
            
            while ( rs.next() ) {
            	ApplicationRecord b = new ApplicationRecord(rs.getLong("applicationId"),
															rs.getString("application"),
															rs.getString("partitionType"),
															rs.getString("repositoryType"),
															rs.getLong("repositoryId"),
															new ArrayList<ApplicationPartitionRecord>()
								    						);
            	ret.add(b);
            }
            
            
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	/******************* PartitionTable */
	
	public int 
	addPartitionToApplication(	final long  applicationId,
								final String file, 
								final long fromTime, 
								final long toTime ) throws Exception {
		int ret;
		Class.forName(JDBC_DRIVER); 
		String sqlString = "INSERT INTO partitionTable (applicationId, file, fromTime, toTime) VALUES(?, ?, ?, ?)";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK_REF, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, applicationId);
			preparedStatement.setString(2, file);
			preparedStatement.setLong(3, fromTime);
			preparedStatement.setLong(4, toTime);
            ret = preparedStatement.executeUpdate();
            preparedStatement.close();
            
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	

	
	public int 
	deleteAllApplicationPartitions( final long applicationId) throws Exception {
		int ret = -1;
		Class.forName(JDBC_DRIVER); 
		String sqlString = "DELETE partitionTable WHERE applicationId = ?";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK_REF, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, applicationId);
            ret = preparedStatement.executeUpdate();
            preparedStatement.close();
            
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	public int 
	deleteApplicationPartition(	final long applicationId, 
								final long fromTime, 
								final long toTime) throws Exception {

		int ret;
		Class.forName(JDBC_DRIVER); 
		String sqlString = "DELETE partitionTable WHERE applicationId = ? AND fromTime >= ? AND toTime <= ? ";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK_REF, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, applicationId);
			preparedStatement.setLong(2, fromTime);
			preparedStatement.setLong(3, toTime);
            ret = preparedStatement.executeUpdate();
            preparedStatement.close();
            
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	

	public List<ApplicationPartitionRecord> 
	getApplicationPartitionByRange(	final long applicationId, 
									final long from, 
									final long to) throws Exception {
		List<ApplicationPartitionRecord> ret = new ArrayList<>();
		Class.forName(JDBC_DRIVER); 
		String sqlString = "SELECT partitionId, "
								+ "applicationId, "
								+ "file, "
								+ "fromTime, "
								+ "toTime "
								+ "FROM partitionTable "
								+ "WHERE applicationId =  ? AND fromTime >= ? AND toTime <= ?";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK_REF, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, applicationId);
			preparedStatement.setLong(2, from);
			preparedStatement.setLong(3, to);
			ResultSet rs = preparedStatement.executeQuery();
            
            while ( rs.next() ) {
            	ApplicationPartitionRecord b = new ApplicationPartitionRecord(	rs.getLong("partitionId"),
																				rs.getLong("applicationId"),
																				rs.getString("file"),
																				rs.getLong("fromTime"),
																				rs.getLong("toTime")
														    				);
            	ret.add(b);
            }
            
            
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	
	
	
	
	public List<ApplicationPartitionRecord> 
	getApplicationPartitions(final long applicationId) throws Exception {
		List<ApplicationPartitionRecord> ret = new ArrayList<>();
		Class.forName(JDBC_DRIVER); 
		String sqlString = "SELECT partitionId, "
								+ "applicationId, "
								+ "file, "
								+ "fromTime, "
								+ "toTime "
								+ "FROM partitionTable "
								+ "WHERE applicationId =  ?";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK_REF, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
			preparedStatement.setLong(1, applicationId);
			ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	ApplicationPartitionRecord b = new ApplicationPartitionRecord(	rs.getLong("partitionId"),
																				rs.getLong("applicationId"),
																				rs.getString("file"),
																				rs.getLong("fromTime"),
																				rs.getLong("toTime")
														    				);
            	ret.add(b);
            }
            
            
            rs.close();
            return ret;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	
}

