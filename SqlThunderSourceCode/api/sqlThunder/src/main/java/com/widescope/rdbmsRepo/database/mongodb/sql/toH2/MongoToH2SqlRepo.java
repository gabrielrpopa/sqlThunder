/*
 * Copyright 2022-present Infinite Loop Corporation Limited, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.widescope.rdbmsRepo.database.mongodb.sql.toH2;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException; 
import java.sql.Statement;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.widescope.logging.AppLogger;
import com.widescope.rdbmsRepo.database.DbUtil;
import org.springframework.stereotype.Component;





 

@Component
public class MongoToH2SqlRepo {

	// JDBC driver name and database URL 
	private final String JDBC_DRIVER = "org.h2.Driver";   
	private final String DB_URL_DISK = "jdbc:h2:file:./mongoToH2SqlRepo;MODE=PostgreSQL";
	   
	//  Database credentials 
	private final String USER = "sa"; 
	private final String PASS = "sa"; 

	public MongoToH2SqlRepo() {	}
	

	
	public void createSchema(final List<String> ddlList) throws Exception {
		Connection conn = null;
		Statement statement = null; 
		try { 
			Class.forName(JDBC_DRIVER); 
			conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS);  
			statement = conn.createStatement(); 
			for (String ddl : ddlList) {
				statement.executeUpdate(ddl);
	        }
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		} finally	{
			DbUtil.closeHandles(conn, statement, null);
	    } 

	}

	
	
	

	
	
	public static void generateSchema() throws Exception {
		try {
			List<String> ddlList = new java.util.ArrayList<String>();
			ddlList.add(MongoToH2SqlRepo.repo);
			ddlList.add(MongoToH2SqlRepo.repo_index1);
			ddlList.add(MongoToH2SqlRepo.repo_const1);
			
			MongoToH2SqlRepo mongoToH2SqlRepo = new MongoToH2SqlRepo();
			mongoToH2SqlRepo.createSchema(ddlList);
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	

	public static String repo = "CREATE TABLE IF NOT EXISTS "
							+ "repo (	id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,"
									+ "	userName VARCHAR(MAX),"
									+ "	dbUniqueName VARCHAR(MAX),"
									+ "	createdAt BIGINT,"
									+ "	closedAt BIGINT,"
									+ "	inMem VARCHAR(1) DEFAULT 'N',"
									+ "	inMemTime BIGINT)";

	
	
	
	public static String repo_index1 = "CREATE UNIQUE INDEX IF NOT EXISTS idx_repo_1 ON repo(userName, dbUniqueName)";
	public static String repo_const1 = "ALTER TABLE repo ADD CONSTRAINT IF NOT EXISTS ck_repo_1 CHECK (inMem IN ('Y', 'N') );";
	
	
	
	public 
	Map<String, H2DbRef> 
	getH2Dbs() throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "SELECT id, "
							+ "   userName, "
							+ "	  dbUniqueName, "
							+ "   createdAt, "
							+ "   closedAt, "
							+ "   inMem, "
							+ "   inMemTime "
						+ "  FROM repo";
		
		Map<String, H2DbRef>  ret = new HashMap<String, H2DbRef> ();
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            
            ResultSet rs = preparedStatement.executeQuery();
            while ( rs.next() ) {
            	H2DbRef b = new H2DbRef(rs.getLong("id"), 
            							rs.getString("userName"), 
            							rs.getString("dbUniqueName"), 
            							rs.getLong("createdAt"), 
            							rs.getLong("closedAt"), 
            							rs.getString("inMem"),  
            							rs.getInt("inMemTime")
            							);
            	ret.put(b.getDbUniqueName(), b);
            }
            rs.close();
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
		return ret;
	}

	
	
	public 
	void 
	updateDb(H2DbRef h2DbRef) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "MERGE INTO repo(  userName, "
										+ "   createdAt, "
										+ "   closedAt, "
										+ "   inMem, "
										+ "   inMemTime "
										+ ") KEY(dbUniqueName) "
							+ "VALUES ( ?, ?, ?, ?, ?) ";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString)) {
			
			preparedStatement.setString(1, h2DbRef.getUser());
            preparedStatement.setLong(2, h2DbRef.getCreatedAt());
            preparedStatement.setLong(3, h2DbRef.getClosedAt());
            preparedStatement.setString(4, h2DbRef.getInMem());
            preparedStatement.setInt(5, h2DbRef.getInMemTime());
            preparedStatement.executeUpdate();

		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
	
	public 
	boolean 
	deleteDb(final String dbUniqueName) throws Exception {
		Class.forName(JDBC_DRIVER);
		String sqlString = "DELETE repo WHERE dbUniqueName = ?";
		
		try (Connection conn = DriverManager.getConnection(DB_URL_DISK, USER, PASS); 
				PreparedStatement preparedStatement = conn.prepareStatement(sqlString))	{
            preparedStatement.setString(1, dbUniqueName);
            int row = preparedStatement.executeUpdate();
            return row == 1;
		} catch (SQLException e)	{
			throw new Exception(AppLogger.logDb(e, Thread.currentThread().getStackTrace()[1]));
		} catch (Exception e) {
			throw new Exception(AppLogger.logException(e, Thread.currentThread().getStackTrace()[1], AppLogger.db));
		}
	}
	
}